//  This file was automatically generated and should not be edited.

import AWSAppSync

public struct CreateOrganizationInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, title: String? = nil, description: String? = nil) {
    graphQLMap = ["id": id, "title": title, "description": description]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var title: String? {
    get {
      return graphQLMap["title"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "title")
    }
  }

  public var description: String? {
    get {
      return graphQLMap["description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }
}

public struct ModelOrganizationConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(title: ModelStringInput? = nil, description: ModelStringInput? = nil, and: [ModelOrganizationConditionInput?]? = nil, or: [ModelOrganizationConditionInput?]? = nil, not: ModelOrganizationConditionInput? = nil) {
    graphQLMap = ["title": title, "description": description, "and": and, "or": or, "not": not]
  }

  public var title: ModelStringInput? {
    get {
      return graphQLMap["title"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "title")
    }
  }

  public var description: ModelStringInput? {
    get {
      return graphQLMap["description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }

  public var and: [ModelOrganizationConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelOrganizationConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelOrganizationConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelOrganizationConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelOrganizationConditionInput? {
    get {
      return graphQLMap["not"] as! ModelOrganizationConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelStringInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: String? = nil, eq: String? = nil, le: String? = nil, lt: String? = nil, ge: String? = nil, gt: String? = nil, contains: String? = nil, notContains: String? = nil, between: [String?]? = nil, beginsWith: String? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil, size: ModelSizeInput? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "attributeExists": attributeExists, "attributeType": attributeType, "size": size]
  }

  public var ne: String? {
    get {
      return graphQLMap["ne"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: String? {
    get {
      return graphQLMap["eq"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: String? {
    get {
      return graphQLMap["le"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: String? {
    get {
      return graphQLMap["lt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: String? {
    get {
      return graphQLMap["ge"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: String? {
    get {
      return graphQLMap["gt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: String? {
    get {
      return graphQLMap["contains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: String? {
    get {
      return graphQLMap["notContains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [String?]? {
    get {
      return graphQLMap["between"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: String? {
    get {
      return graphQLMap["beginsWith"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }

  public var size: ModelSizeInput? {
    get {
      return graphQLMap["size"] as! ModelSizeInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }
}

public enum ModelAttributeTypes: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case binary
  case binarySet
  case bool
  case list
  case map
  case number
  case numberSet
  case string
  case stringSet
  case null
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "binary": self = .binary
      case "binarySet": self = .binarySet
      case "bool": self = .bool
      case "list": self = .list
      case "map": self = .map
      case "number": self = .number
      case "numberSet": self = .numberSet
      case "string": self = .string
      case "stringSet": self = .stringSet
      case "_null": self = .null
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .binary: return "binary"
      case .binarySet: return "binarySet"
      case .bool: return "bool"
      case .list: return "list"
      case .map: return "map"
      case .number: return "number"
      case .numberSet: return "numberSet"
      case .string: return "string"
      case .stringSet: return "stringSet"
      case .null: return "_null"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: ModelAttributeTypes, rhs: ModelAttributeTypes) -> Bool {
    switch (lhs, rhs) {
      case (.binary, .binary): return true
      case (.binarySet, .binarySet): return true
      case (.bool, .bool): return true
      case (.list, .list): return true
      case (.map, .map): return true
      case (.number, .number): return true
      case (.numberSet, .numberSet): return true
      case (.string, .string): return true
      case (.stringSet, .stringSet): return true
      case (.null, .null): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct ModelSizeInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between]
  }

  public var ne: Int? {
    get {
      return graphQLMap["ne"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Int? {
    get {
      return graphQLMap["eq"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Int? {
    get {
      return graphQLMap["le"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Int? {
    get {
      return graphQLMap["lt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Int? {
    get {
      return graphQLMap["ge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Int? {
    get {
      return graphQLMap["gt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Int?]? {
    get {
      return graphQLMap["between"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }
}

public enum Role: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case user
  case admin
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "User": self = .user
      case "Admin": self = .admin
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .user: return "User"
      case .admin: return "Admin"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: Role, rhs: Role) -> Bool {
    switch (lhs, rhs) {
      case (.user, .user): return true
      case (.admin, .admin): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct UpdateOrganizationInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, title: String? = nil, description: String? = nil) {
    graphQLMap = ["id": id, "title": title, "description": description]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var title: String? {
    get {
      return graphQLMap["title"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "title")
    }
  }

  public var description: String? {
    get {
      return graphQLMap["description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }
}

public struct DeleteOrganizationInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil) {
    graphQLMap = ["id": id]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }
}

public struct CreateProgramInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, name: String, orgId: GraphQLID, description: String? = nil) {
    graphQLMap = ["id": id, "name": name, "orgID": orgId, "description": description]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var orgId: GraphQLID {
    get {
      return graphQLMap["orgID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "orgID")
    }
  }

  public var description: String? {
    get {
      return graphQLMap["description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }
}

public struct ModelProgramConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(name: ModelStringInput? = nil, orgId: ModelIDInput? = nil, description: ModelStringInput? = nil, and: [ModelProgramConditionInput?]? = nil, or: [ModelProgramConditionInput?]? = nil, not: ModelProgramConditionInput? = nil) {
    graphQLMap = ["name": name, "orgID": orgId, "description": description, "and": and, "or": or, "not": not]
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var orgId: ModelIDInput? {
    get {
      return graphQLMap["orgID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "orgID")
    }
  }

  public var description: ModelStringInput? {
    get {
      return graphQLMap["description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }

  public var and: [ModelProgramConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelProgramConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelProgramConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelProgramConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelProgramConditionInput? {
    get {
      return graphQLMap["not"] as! ModelProgramConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelIDInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: GraphQLID? = nil, eq: GraphQLID? = nil, le: GraphQLID? = nil, lt: GraphQLID? = nil, ge: GraphQLID? = nil, gt: GraphQLID? = nil, contains: GraphQLID? = nil, notContains: GraphQLID? = nil, between: [GraphQLID?]? = nil, beginsWith: GraphQLID? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil, size: ModelSizeInput? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "attributeExists": attributeExists, "attributeType": attributeType, "size": size]
  }

  public var ne: GraphQLID? {
    get {
      return graphQLMap["ne"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: GraphQLID? {
    get {
      return graphQLMap["eq"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: GraphQLID? {
    get {
      return graphQLMap["le"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: GraphQLID? {
    get {
      return graphQLMap["lt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: GraphQLID? {
    get {
      return graphQLMap["ge"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: GraphQLID? {
    get {
      return graphQLMap["gt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: GraphQLID? {
    get {
      return graphQLMap["contains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: GraphQLID? {
    get {
      return graphQLMap["notContains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [GraphQLID?]? {
    get {
      return graphQLMap["between"] as! [GraphQLID?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: GraphQLID? {
    get {
      return graphQLMap["beginsWith"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }

  public var size: ModelSizeInput? {
    get {
      return graphQLMap["size"] as! ModelSizeInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }
}

public struct UpdateProgramInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, name: String? = nil, orgId: GraphQLID? = nil, description: String? = nil) {
    graphQLMap = ["id": id, "name": name, "orgID": orgId, "description": description]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var orgId: GraphQLID? {
    get {
      return graphQLMap["orgID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "orgID")
    }
  }

  public var description: String? {
    get {
      return graphQLMap["description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }
}

public struct DeleteProgramInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil) {
    graphQLMap = ["id": id]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }
}

public struct CreateMembershipInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, role: Role, userId: GraphQLID, programId: GraphQLID) {
    graphQLMap = ["id": id, "role": role, "userId": userId, "programId": programId]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var role: Role {
    get {
      return graphQLMap["role"] as! Role
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "role")
    }
  }

  public var userId: GraphQLID {
    get {
      return graphQLMap["userId"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userId")
    }
  }

  public var programId: GraphQLID {
    get {
      return graphQLMap["programId"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "programId")
    }
  }
}

public struct ModelMembershipConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(role: ModelRoleInput? = nil, userId: ModelIDInput? = nil, programId: ModelIDInput? = nil, and: [ModelMembershipConditionInput?]? = nil, or: [ModelMembershipConditionInput?]? = nil, not: ModelMembershipConditionInput? = nil) {
    graphQLMap = ["role": role, "userId": userId, "programId": programId, "and": and, "or": or, "not": not]
  }

  public var role: ModelRoleInput? {
    get {
      return graphQLMap["role"] as! ModelRoleInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "role")
    }
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userId")
    }
  }

  public var programId: ModelIDInput? {
    get {
      return graphQLMap["programId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "programId")
    }
  }

  public var and: [ModelMembershipConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelMembershipConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelMembershipConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelMembershipConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelMembershipConditionInput? {
    get {
      return graphQLMap["not"] as! ModelMembershipConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelRoleInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(eq: Role? = nil, ne: Role? = nil) {
    graphQLMap = ["eq": eq, "ne": ne]
  }

  public var eq: Role? {
    get {
      return graphQLMap["eq"] as! Role?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var ne: Role? {
    get {
      return graphQLMap["ne"] as! Role?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }
}

public struct UpdateMembershipInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, role: Role? = nil, userId: GraphQLID? = nil, programId: GraphQLID? = nil) {
    graphQLMap = ["id": id, "role": role, "userId": userId, "programId": programId]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var role: Role? {
    get {
      return graphQLMap["role"] as! Role?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "role")
    }
  }

  public var userId: GraphQLID? {
    get {
      return graphQLMap["userId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userId")
    }
  }

  public var programId: GraphQLID? {
    get {
      return graphQLMap["programId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "programId")
    }
  }
}

public struct DeleteMembershipInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil) {
    graphQLMap = ["id": id]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }
}

public struct CreateProcedureInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, name: String, description: String? = nil) {
    graphQLMap = ["id": id, "name": name, "description": description]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var description: String? {
    get {
      return graphQLMap["description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }
}

public struct ModelProcedureConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(name: ModelStringInput? = nil, description: ModelStringInput? = nil, and: [ModelProcedureConditionInput?]? = nil, or: [ModelProcedureConditionInput?]? = nil, not: ModelProcedureConditionInput? = nil) {
    graphQLMap = ["name": name, "description": description, "and": and, "or": or, "not": not]
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var description: ModelStringInput? {
    get {
      return graphQLMap["description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }

  public var and: [ModelProcedureConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelProcedureConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelProcedureConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelProcedureConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelProcedureConditionInput? {
    get {
      return graphQLMap["not"] as! ModelProcedureConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateProcedureInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, name: String? = nil, description: String? = nil) {
    graphQLMap = ["id": id, "name": name, "description": description]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var description: String? {
    get {
      return graphQLMap["description"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }
}

public struct DeleteProcedureInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil) {
    graphQLMap = ["id": id]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }
}

public struct CreateUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
    graphQLMap = ["id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var orgId: GraphQLID? {
    get {
      return graphQLMap["orgID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "orgID")
    }
  }

  public var userName: String? {
    get {
      return graphQLMap["userName"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userName")
    }
  }

  public var email: String {
    get {
      return graphQLMap["email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var phone: String? {
    get {
      return graphQLMap["phone"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var firstName: String? {
    get {
      return graphQLMap["firstName"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: String? {
    get {
      return graphQLMap["lastName"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var npi: Int? {
    get {
      return graphQLMap["npi"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "npi")
    }
  }

  public var isRater: Bool? {
    get {
      return graphQLMap["isRater"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isRater")
    }
  }
}

public struct ModelUserConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(orgId: ModelIDInput? = nil, userName: ModelStringInput? = nil, email: ModelStringInput? = nil, phone: ModelStringInput? = nil, firstName: ModelStringInput? = nil, lastName: ModelStringInput? = nil, npi: ModelIntInput? = nil, isRater: ModelBooleanInput? = nil, and: [ModelUserConditionInput?]? = nil, or: [ModelUserConditionInput?]? = nil, not: ModelUserConditionInput? = nil) {
    graphQLMap = ["orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "and": and, "or": or, "not": not]
  }

  public var orgId: ModelIDInput? {
    get {
      return graphQLMap["orgID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "orgID")
    }
  }

  public var userName: ModelStringInput? {
    get {
      return graphQLMap["userName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userName")
    }
  }

  public var email: ModelStringInput? {
    get {
      return graphQLMap["email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var phone: ModelStringInput? {
    get {
      return graphQLMap["phone"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var firstName: ModelStringInput? {
    get {
      return graphQLMap["firstName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: ModelStringInput? {
    get {
      return graphQLMap["lastName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var npi: ModelIntInput? {
    get {
      return graphQLMap["npi"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "npi")
    }
  }

  public var isRater: ModelBooleanInput? {
    get {
      return graphQLMap["isRater"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isRater")
    }
  }

  public var and: [ModelUserConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelUserConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelUserConditionInput? {
    get {
      return graphQLMap["not"] as! ModelUserConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelIntInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "attributeExists": attributeExists, "attributeType": attributeType]
  }

  public var ne: Int? {
    get {
      return graphQLMap["ne"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Int? {
    get {
      return graphQLMap["eq"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Int? {
    get {
      return graphQLMap["le"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Int? {
    get {
      return graphQLMap["lt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Int? {
    get {
      return graphQLMap["ge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Int? {
    get {
      return graphQLMap["gt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Int?]? {
    get {
      return graphQLMap["between"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }
}

public struct ModelBooleanInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Bool? = nil, eq: Bool? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "attributeExists": attributeExists, "attributeType": attributeType]
  }

  public var ne: Bool? {
    get {
      return graphQLMap["ne"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Bool? {
    get {
      return graphQLMap["eq"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }
}

public struct UpdateUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String? = nil, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
    graphQLMap = ["id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var orgId: GraphQLID? {
    get {
      return graphQLMap["orgID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "orgID")
    }
  }

  public var userName: String? {
    get {
      return graphQLMap["userName"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userName")
    }
  }

  public var email: String? {
    get {
      return graphQLMap["email"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var phone: String? {
    get {
      return graphQLMap["phone"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var firstName: String? {
    get {
      return graphQLMap["firstName"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: String? {
    get {
      return graphQLMap["lastName"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var npi: Int? {
    get {
      return graphQLMap["npi"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "npi")
    }
  }

  public var isRater: Bool? {
    get {
      return graphQLMap["isRater"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isRater")
    }
  }
}

public struct DeleteUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil) {
    graphQLMap = ["id": id]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }
}

public struct CreateCertificationRecordInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, procedureId: GraphQLID, isCertified: Bool? = nil, certificationMethod: CertificationMethod? = nil, subjectId: GraphQLID, totalProcedureEvals: Int? = nil) {
    graphQLMap = ["id": id, "procedureId": procedureId, "isCertified": isCertified, "certificationMethod": certificationMethod, "subjectId": subjectId, "totalProcedureEvals": totalProcedureEvals]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var procedureId: GraphQLID {
    get {
      return graphQLMap["procedureId"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "procedureId")
    }
  }

  public var isCertified: Bool? {
    get {
      return graphQLMap["isCertified"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isCertified")
    }
  }

  public var certificationMethod: CertificationMethod? {
    get {
      return graphQLMap["certificationMethod"] as! CertificationMethod?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "certificationMethod")
    }
  }

  public var subjectId: GraphQLID {
    get {
      return graphQLMap["subjectId"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subjectId")
    }
  }

  public var totalProcedureEvals: Int? {
    get {
      return graphQLMap["totalProcedureEvals"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalProcedureEvals")
    }
  }
}

public enum CertificationMethod: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case manual
  case rollingS
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "Manual": self = .manual
      case "RollingS": self = .rollingS
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .manual: return "Manual"
      case .rollingS: return "RollingS"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: CertificationMethod, rhs: CertificationMethod) -> Bool {
    switch (lhs, rhs) {
      case (.manual, .manual): return true
      case (.rollingS, .rollingS): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct ModelCertificationRecordConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(procedureId: ModelIDInput? = nil, isCertified: ModelBooleanInput? = nil, certificationMethod: ModelCertificationMethodInput? = nil, subjectId: ModelIDInput? = nil, totalProcedureEvals: ModelIntInput? = nil, and: [ModelCertificationRecordConditionInput?]? = nil, or: [ModelCertificationRecordConditionInput?]? = nil, not: ModelCertificationRecordConditionInput? = nil) {
    graphQLMap = ["procedureId": procedureId, "isCertified": isCertified, "certificationMethod": certificationMethod, "subjectId": subjectId, "totalProcedureEvals": totalProcedureEvals, "and": and, "or": or, "not": not]
  }

  public var procedureId: ModelIDInput? {
    get {
      return graphQLMap["procedureId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "procedureId")
    }
  }

  public var isCertified: ModelBooleanInput? {
    get {
      return graphQLMap["isCertified"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isCertified")
    }
  }

  public var certificationMethod: ModelCertificationMethodInput? {
    get {
      return graphQLMap["certificationMethod"] as! ModelCertificationMethodInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "certificationMethod")
    }
  }

  public var subjectId: ModelIDInput? {
    get {
      return graphQLMap["subjectId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subjectId")
    }
  }

  public var totalProcedureEvals: ModelIntInput? {
    get {
      return graphQLMap["totalProcedureEvals"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalProcedureEvals")
    }
  }

  public var and: [ModelCertificationRecordConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelCertificationRecordConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelCertificationRecordConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelCertificationRecordConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelCertificationRecordConditionInput? {
    get {
      return graphQLMap["not"] as! ModelCertificationRecordConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelCertificationMethodInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(eq: CertificationMethod? = nil, ne: CertificationMethod? = nil) {
    graphQLMap = ["eq": eq, "ne": ne]
  }

  public var eq: CertificationMethod? {
    get {
      return graphQLMap["eq"] as! CertificationMethod?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var ne: CertificationMethod? {
    get {
      return graphQLMap["ne"] as! CertificationMethod?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }
}

public struct UpdateCertificationRecordInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, procedureId: GraphQLID? = nil, isCertified: Bool? = nil, certificationMethod: CertificationMethod? = nil, subjectId: GraphQLID? = nil, totalProcedureEvals: Int? = nil) {
    graphQLMap = ["id": id, "procedureId": procedureId, "isCertified": isCertified, "certificationMethod": certificationMethod, "subjectId": subjectId, "totalProcedureEvals": totalProcedureEvals]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var procedureId: GraphQLID? {
    get {
      return graphQLMap["procedureId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "procedureId")
    }
  }

  public var isCertified: Bool? {
    get {
      return graphQLMap["isCertified"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isCertified")
    }
  }

  public var certificationMethod: CertificationMethod? {
    get {
      return graphQLMap["certificationMethod"] as! CertificationMethod?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "certificationMethod")
    }
  }

  public var subjectId: GraphQLID? {
    get {
      return graphQLMap["subjectId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subjectId")
    }
  }

  public var totalProcedureEvals: Int? {
    get {
      return graphQLMap["totalProcedureEvals"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalProcedureEvals")
    }
  }
}

public struct DeleteCertificationRecordInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil) {
    graphQLMap = ["id": id]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }
}

public struct CreateEvaluationResponseInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, subjectId: GraphQLID, raterId: GraphQLID, procedureId: GraphQLID, evaluationDate: String, ratingLevel: Int? = nil, certificationRecordId: GraphQLID? = nil) {
    graphQLMap = ["id": id, "subjectId": subjectId, "raterId": raterId, "procedureId": procedureId, "evaluationDate": evaluationDate, "ratingLevel": ratingLevel, "certificationRecordId": certificationRecordId]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var subjectId: GraphQLID {
    get {
      return graphQLMap["subjectId"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subjectId")
    }
  }

  public var raterId: GraphQLID {
    get {
      return graphQLMap["raterId"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "raterId")
    }
  }

  public var procedureId: GraphQLID {
    get {
      return graphQLMap["procedureId"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "procedureId")
    }
  }

  public var evaluationDate: String {
    get {
      return graphQLMap["evaluationDate"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "evaluationDate")
    }
  }

  public var ratingLevel: Int? {
    get {
      return graphQLMap["ratingLevel"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ratingLevel")
    }
  }

  public var certificationRecordId: GraphQLID? {
    get {
      return graphQLMap["certificationRecordId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "certificationRecordId")
    }
  }
}

public struct ModelOrganizationFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, title: ModelStringInput? = nil, description: ModelStringInput? = nil, and: [ModelOrganizationFilterInput?]? = nil, or: [ModelOrganizationFilterInput?]? = nil, not: ModelOrganizationFilterInput? = nil) {
    graphQLMap = ["id": id, "title": title, "description": description, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var title: ModelStringInput? {
    get {
      return graphQLMap["title"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "title")
    }
  }

  public var description: ModelStringInput? {
    get {
      return graphQLMap["description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }

  public var and: [ModelOrganizationFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelOrganizationFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelOrganizationFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelOrganizationFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelOrganizationFilterInput? {
    get {
      return graphQLMap["not"] as! ModelOrganizationFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelProgramFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, orgId: ModelIDInput? = nil, description: ModelStringInput? = nil, and: [ModelProgramFilterInput?]? = nil, or: [ModelProgramFilterInput?]? = nil, not: ModelProgramFilterInput? = nil) {
    graphQLMap = ["id": id, "name": name, "orgID": orgId, "description": description, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var orgId: ModelIDInput? {
    get {
      return graphQLMap["orgID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "orgID")
    }
  }

  public var description: ModelStringInput? {
    get {
      return graphQLMap["description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }

  public var and: [ModelProgramFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelProgramFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelProgramFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelProgramFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelProgramFilterInput? {
    get {
      return graphQLMap["not"] as! ModelProgramFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelMembershipFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, role: ModelRoleInput? = nil, userId: ModelIDInput? = nil, programId: ModelIDInput? = nil, and: [ModelMembershipFilterInput?]? = nil, or: [ModelMembershipFilterInput?]? = nil, not: ModelMembershipFilterInput? = nil) {
    graphQLMap = ["id": id, "role": role, "userId": userId, "programId": programId, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var role: ModelRoleInput? {
    get {
      return graphQLMap["role"] as! ModelRoleInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "role")
    }
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userId")
    }
  }

  public var programId: ModelIDInput? {
    get {
      return graphQLMap["programId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "programId")
    }
  }

  public var and: [ModelMembershipFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelMembershipFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelMembershipFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelMembershipFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelMembershipFilterInput? {
    get {
      return graphQLMap["not"] as! ModelMembershipFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelProcedureFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, description: ModelStringInput? = nil, and: [ModelProcedureFilterInput?]? = nil, or: [ModelProcedureFilterInput?]? = nil, not: ModelProcedureFilterInput? = nil) {
    graphQLMap = ["id": id, "name": name, "description": description, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var description: ModelStringInput? {
    get {
      return graphQLMap["description"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }

  public var and: [ModelProcedureFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelProcedureFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelProcedureFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelProcedureFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelProcedureFilterInput? {
    get {
      return graphQLMap["not"] as! ModelProcedureFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, orgId: ModelIDInput? = nil, userName: ModelStringInput? = nil, email: ModelStringInput? = nil, phone: ModelStringInput? = nil, firstName: ModelStringInput? = nil, lastName: ModelStringInput? = nil, npi: ModelIntInput? = nil, isRater: ModelBooleanInput? = nil, and: [ModelUserFilterInput?]? = nil, or: [ModelUserFilterInput?]? = nil, not: ModelUserFilterInput? = nil) {
    graphQLMap = ["id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var orgId: ModelIDInput? {
    get {
      return graphQLMap["orgID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "orgID")
    }
  }

  public var userName: ModelStringInput? {
    get {
      return graphQLMap["userName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userName")
    }
  }

  public var email: ModelStringInput? {
    get {
      return graphQLMap["email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var phone: ModelStringInput? {
    get {
      return graphQLMap["phone"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var firstName: ModelStringInput? {
    get {
      return graphQLMap["firstName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: ModelStringInput? {
    get {
      return graphQLMap["lastName"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var npi: ModelIntInput? {
    get {
      return graphQLMap["npi"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "npi")
    }
  }

  public var isRater: ModelBooleanInput? {
    get {
      return graphQLMap["isRater"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isRater")
    }
  }

  public var and: [ModelUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelUserFilterInput? {
    get {
      return graphQLMap["not"] as! ModelUserFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelEvaluationResponseFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, subjectId: ModelIDInput? = nil, raterId: ModelIDInput? = nil, procedureId: ModelIDInput? = nil, evaluationDate: ModelStringInput? = nil, ratingLevel: ModelIntInput? = nil, certificationRecordId: ModelIDInput? = nil, and: [ModelEvaluationResponseFilterInput?]? = nil, or: [ModelEvaluationResponseFilterInput?]? = nil, not: ModelEvaluationResponseFilterInput? = nil) {
    graphQLMap = ["id": id, "subjectId": subjectId, "raterId": raterId, "procedureId": procedureId, "evaluationDate": evaluationDate, "ratingLevel": ratingLevel, "certificationRecordId": certificationRecordId, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var subjectId: ModelIDInput? {
    get {
      return graphQLMap["subjectId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subjectId")
    }
  }

  public var raterId: ModelIDInput? {
    get {
      return graphQLMap["raterId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "raterId")
    }
  }

  public var procedureId: ModelIDInput? {
    get {
      return graphQLMap["procedureId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "procedureId")
    }
  }

  public var evaluationDate: ModelStringInput? {
    get {
      return graphQLMap["evaluationDate"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "evaluationDate")
    }
  }

  public var ratingLevel: ModelIntInput? {
    get {
      return graphQLMap["ratingLevel"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ratingLevel")
    }
  }

  public var certificationRecordId: ModelIDInput? {
    get {
      return graphQLMap["certificationRecordId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "certificationRecordId")
    }
  }

  public var and: [ModelEvaluationResponseFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelEvaluationResponseFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelEvaluationResponseFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelEvaluationResponseFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelEvaluationResponseFilterInput? {
    get {
      return graphQLMap["not"] as! ModelEvaluationResponseFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelCertificationRecordFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, procedureId: ModelIDInput? = nil, isCertified: ModelBooleanInput? = nil, certificationMethod: ModelCertificationMethodInput? = nil, subjectId: ModelIDInput? = nil, totalProcedureEvals: ModelIntInput? = nil, and: [ModelCertificationRecordFilterInput?]? = nil, or: [ModelCertificationRecordFilterInput?]? = nil, not: ModelCertificationRecordFilterInput? = nil) {
    graphQLMap = ["id": id, "procedureId": procedureId, "isCertified": isCertified, "certificationMethod": certificationMethod, "subjectId": subjectId, "totalProcedureEvals": totalProcedureEvals, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var procedureId: ModelIDInput? {
    get {
      return graphQLMap["procedureId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "procedureId")
    }
  }

  public var isCertified: ModelBooleanInput? {
    get {
      return graphQLMap["isCertified"] as! ModelBooleanInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isCertified")
    }
  }

  public var certificationMethod: ModelCertificationMethodInput? {
    get {
      return graphQLMap["certificationMethod"] as! ModelCertificationMethodInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "certificationMethod")
    }
  }

  public var subjectId: ModelIDInput? {
    get {
      return graphQLMap["subjectId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subjectId")
    }
  }

  public var totalProcedureEvals: ModelIntInput? {
    get {
      return graphQLMap["totalProcedureEvals"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "totalProcedureEvals")
    }
  }

  public var and: [ModelCertificationRecordFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelCertificationRecordFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelCertificationRecordFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelCertificationRecordFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelCertificationRecordFilterInput? {
    get {
      return graphQLMap["not"] as! ModelCertificationRecordFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public enum ModelSortDirection: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case asc
  case desc
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ASC": self = .asc
      case "DESC": self = .desc
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .asc: return "ASC"
      case .desc: return "DESC"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: ModelSortDirection, rhs: ModelSortDirection) -> Bool {
    switch (lhs, rhs) {
      case (.asc, .asc): return true
      case (.desc, .desc): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public final class CreateOrganizationMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateOrganization($input: CreateOrganizationInput!, $condition: ModelOrganizationConditionInput) {\n  createOrganization(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    description\n    programs {\n      __typename\n      items {\n        __typename\n        id\n        name\n        orgID\n        description\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            role\n            userId\n            programId\n          }\n          nextToken\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public var input: CreateOrganizationInput
  public var condition: ModelOrganizationConditionInput?

  public init(input: CreateOrganizationInput, condition: ModelOrganizationConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createOrganization", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateOrganization.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createOrganization: CreateOrganization? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createOrganization": createOrganization.flatMap { $0.snapshot }])
    }

    public var createOrganization: CreateOrganization? {
      get {
        return (snapshot["createOrganization"] as? Snapshot).flatMap { CreateOrganization(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createOrganization")
      }
    }

    public struct CreateOrganization: GraphQLSelectionSet {
      public static let possibleTypes = ["Organization"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("programs", type: .object(Program.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, title: String? = nil, description: String? = nil, programs: Program? = nil) {
        self.init(snapshot: ["__typename": "Organization", "id": id, "title": title, "description": description, "programs": programs.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var programs: Program? {
        get {
          return (snapshot["programs"] as? Snapshot).flatMap { Program(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "programs")
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelProgramConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelProgramConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Program"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
            self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var orgId: GraphQLID {
            get {
              return snapshot["orgID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "orgID")
            }
          }

          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelMembershipConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Membership"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .nonNull(.scalar(Role.self))),
                GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, role: Role, userId: GraphQLID, programId: GraphQLID) {
                self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "programId": programId])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var role: Role {
                get {
                  return snapshot["role"]! as! Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userId")
                }
              }

              public var programId: GraphQLID {
                get {
                  return snapshot["programId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "programId")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateOrganizationMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateOrganization($input: UpdateOrganizationInput!, $condition: ModelOrganizationConditionInput) {\n  updateOrganization(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    description\n    programs {\n      __typename\n      items {\n        __typename\n        id\n        name\n        orgID\n        description\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            role\n            userId\n            programId\n          }\n          nextToken\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public var input: UpdateOrganizationInput
  public var condition: ModelOrganizationConditionInput?

  public init(input: UpdateOrganizationInput, condition: ModelOrganizationConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateOrganization", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateOrganization.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateOrganization: UpdateOrganization? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateOrganization": updateOrganization.flatMap { $0.snapshot }])
    }

    public var updateOrganization: UpdateOrganization? {
      get {
        return (snapshot["updateOrganization"] as? Snapshot).flatMap { UpdateOrganization(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateOrganization")
      }
    }

    public struct UpdateOrganization: GraphQLSelectionSet {
      public static let possibleTypes = ["Organization"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("programs", type: .object(Program.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, title: String? = nil, description: String? = nil, programs: Program? = nil) {
        self.init(snapshot: ["__typename": "Organization", "id": id, "title": title, "description": description, "programs": programs.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var programs: Program? {
        get {
          return (snapshot["programs"] as? Snapshot).flatMap { Program(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "programs")
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelProgramConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelProgramConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Program"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
            self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var orgId: GraphQLID {
            get {
              return snapshot["orgID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "orgID")
            }
          }

          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelMembershipConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Membership"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .nonNull(.scalar(Role.self))),
                GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, role: Role, userId: GraphQLID, programId: GraphQLID) {
                self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "programId": programId])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var role: Role {
                get {
                  return snapshot["role"]! as! Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userId")
                }
              }

              public var programId: GraphQLID {
                get {
                  return snapshot["programId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "programId")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class DeleteOrganizationMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteOrganization($input: DeleteOrganizationInput!, $condition: ModelOrganizationConditionInput) {\n  deleteOrganization(input: $input, condition: $condition) {\n    __typename\n    id\n    title\n    description\n    programs {\n      __typename\n      items {\n        __typename\n        id\n        name\n        orgID\n        description\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            role\n            userId\n            programId\n          }\n          nextToken\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public var input: DeleteOrganizationInput
  public var condition: ModelOrganizationConditionInput?

  public init(input: DeleteOrganizationInput, condition: ModelOrganizationConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteOrganization", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteOrganization.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteOrganization: DeleteOrganization? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteOrganization": deleteOrganization.flatMap { $0.snapshot }])
    }

    public var deleteOrganization: DeleteOrganization? {
      get {
        return (snapshot["deleteOrganization"] as? Snapshot).flatMap { DeleteOrganization(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteOrganization")
      }
    }

    public struct DeleteOrganization: GraphQLSelectionSet {
      public static let possibleTypes = ["Organization"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("programs", type: .object(Program.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, title: String? = nil, description: String? = nil, programs: Program? = nil) {
        self.init(snapshot: ["__typename": "Organization", "id": id, "title": title, "description": description, "programs": programs.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var programs: Program? {
        get {
          return (snapshot["programs"] as? Snapshot).flatMap { Program(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "programs")
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelProgramConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelProgramConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Program"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
            self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var orgId: GraphQLID {
            get {
              return snapshot["orgID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "orgID")
            }
          }

          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelMembershipConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Membership"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .nonNull(.scalar(Role.self))),
                GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, role: Role, userId: GraphQLID, programId: GraphQLID) {
                self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "programId": programId])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var role: Role {
                get {
                  return snapshot["role"]! as! Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userId")
                }
              }

              public var programId: GraphQLID {
                get {
                  return snapshot["programId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "programId")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class CreateProgramMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateProgram($input: CreateProgramInput!, $condition: ModelProgramConditionInput) {\n  createProgram(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    orgID\n    description\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public var input: CreateProgramInput
  public var condition: ModelProgramConditionInput?

  public init(input: CreateProgramInput, condition: ModelProgramConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createProgram", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createProgram: CreateProgram? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createProgram": createProgram.flatMap { $0.snapshot }])
    }

    public var createProgram: CreateProgram? {
      get {
        return (snapshot["createProgram"] as? Snapshot).flatMap { CreateProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createProgram")
      }
    }

    public struct CreateProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["Program"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var orgId: GraphQLID {
        get {
          return snapshot["orgID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateProgramMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateProgram($input: UpdateProgramInput!, $condition: ModelProgramConditionInput) {\n  updateProgram(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    orgID\n    description\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public var input: UpdateProgramInput
  public var condition: ModelProgramConditionInput?

  public init(input: UpdateProgramInput, condition: ModelProgramConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateProgram", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateProgram: UpdateProgram? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateProgram": updateProgram.flatMap { $0.snapshot }])
    }

    public var updateProgram: UpdateProgram? {
      get {
        return (snapshot["updateProgram"] as? Snapshot).flatMap { UpdateProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateProgram")
      }
    }

    public struct UpdateProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["Program"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var orgId: GraphQLID {
        get {
          return snapshot["orgID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class DeleteProgramMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteProgram($input: DeleteProgramInput!, $condition: ModelProgramConditionInput) {\n  deleteProgram(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    orgID\n    description\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public var input: DeleteProgramInput
  public var condition: ModelProgramConditionInput?

  public init(input: DeleteProgramInput, condition: ModelProgramConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteProgram", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteProgram: DeleteProgram? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteProgram": deleteProgram.flatMap { $0.snapshot }])
    }

    public var deleteProgram: DeleteProgram? {
      get {
        return (snapshot["deleteProgram"] as? Snapshot).flatMap { DeleteProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteProgram")
      }
    }

    public struct DeleteProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["Program"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var orgId: GraphQLID {
        get {
          return snapshot["orgID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class CreateMembershipMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateMembership($input: CreateMembershipInput!, $condition: ModelMembershipConditionInput) {\n  createMembership(input: $input, condition: $condition) {\n    __typename\n    id\n    role\n    userId\n    user {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    programId\n    program {\n      __typename\n      id\n      name\n      orgID\n      description\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n  }\n}"

  public var input: CreateMembershipInput
  public var condition: ModelMembershipConditionInput?

  public init(input: CreateMembershipInput, condition: ModelMembershipConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createMembership", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateMembership.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createMembership: CreateMembership? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createMembership": createMembership.flatMap { $0.snapshot }])
    }

    public var createMembership: CreateMembership? {
      get {
        return (snapshot["createMembership"] as? Snapshot).flatMap { CreateMembership(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createMembership")
      }
    }

    public struct CreateMembership: GraphQLSelectionSet {
      public static let possibleTypes = ["Membership"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("role", type: .nonNull(.scalar(Role.self))),
        GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("program", type: .nonNull(.object(Program.selections))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
        self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var role: Role {
        get {
          return snapshot["role"]! as! Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userId")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var programId: GraphQLID {
        get {
          return snapshot["programId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "programId")
        }
      }

      public var program: Program {
        get {
          return Program(snapshot: snapshot["program"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "program")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["Program"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var orgId: GraphQLID {
          get {
            return snapshot["orgID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateMembershipMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateMembership($input: UpdateMembershipInput!, $condition: ModelMembershipConditionInput) {\n  updateMembership(input: $input, condition: $condition) {\n    __typename\n    id\n    role\n    userId\n    user {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    programId\n    program {\n      __typename\n      id\n      name\n      orgID\n      description\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n  }\n}"

  public var input: UpdateMembershipInput
  public var condition: ModelMembershipConditionInput?

  public init(input: UpdateMembershipInput, condition: ModelMembershipConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateMembership", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateMembership.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateMembership: UpdateMembership? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateMembership": updateMembership.flatMap { $0.snapshot }])
    }

    public var updateMembership: UpdateMembership? {
      get {
        return (snapshot["updateMembership"] as? Snapshot).flatMap { UpdateMembership(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateMembership")
      }
    }

    public struct UpdateMembership: GraphQLSelectionSet {
      public static let possibleTypes = ["Membership"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("role", type: .nonNull(.scalar(Role.self))),
        GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("program", type: .nonNull(.object(Program.selections))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
        self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var role: Role {
        get {
          return snapshot["role"]! as! Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userId")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var programId: GraphQLID {
        get {
          return snapshot["programId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "programId")
        }
      }

      public var program: Program {
        get {
          return Program(snapshot: snapshot["program"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "program")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["Program"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var orgId: GraphQLID {
          get {
            return snapshot["orgID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class DeleteMembershipMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteMembership($input: DeleteMembershipInput!, $condition: ModelMembershipConditionInput) {\n  deleteMembership(input: $input, condition: $condition) {\n    __typename\n    id\n    role\n    userId\n    user {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    programId\n    program {\n      __typename\n      id\n      name\n      orgID\n      description\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n  }\n}"

  public var input: DeleteMembershipInput
  public var condition: ModelMembershipConditionInput?

  public init(input: DeleteMembershipInput, condition: ModelMembershipConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteMembership", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteMembership.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteMembership: DeleteMembership? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteMembership": deleteMembership.flatMap { $0.snapshot }])
    }

    public var deleteMembership: DeleteMembership? {
      get {
        return (snapshot["deleteMembership"] as? Snapshot).flatMap { DeleteMembership(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteMembership")
      }
    }

    public struct DeleteMembership: GraphQLSelectionSet {
      public static let possibleTypes = ["Membership"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("role", type: .nonNull(.scalar(Role.self))),
        GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("program", type: .nonNull(.object(Program.selections))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
        self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var role: Role {
        get {
          return snapshot["role"]! as! Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userId")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var programId: GraphQLID {
        get {
          return snapshot["programId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "programId")
        }
      }

      public var program: Program {
        get {
          return Program(snapshot: snapshot["program"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "program")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["Program"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var orgId: GraphQLID {
          get {
            return snapshot["orgID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class CreateProcedureMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateProcedure($input: CreateProcedureInput!, $condition: ModelProcedureConditionInput) {\n  createProcedure(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    description\n  }\n}"

  public var input: CreateProcedureInput
  public var condition: ModelProcedureConditionInput?

  public init(input: CreateProcedureInput, condition: ModelProcedureConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createProcedure", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateProcedure.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createProcedure: CreateProcedure? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createProcedure": createProcedure.flatMap { $0.snapshot }])
    }

    public var createProcedure: CreateProcedure? {
      get {
        return (snapshot["createProcedure"] as? Snapshot).flatMap { CreateProcedure(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createProcedure")
      }
    }

    public struct CreateProcedure: GraphQLSelectionSet {
      public static let possibleTypes = ["Procedure"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("description", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, description: String? = nil) {
        self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }
    }
  }
}

public final class UpdateProcedureMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateProcedure($input: UpdateProcedureInput!, $condition: ModelProcedureConditionInput) {\n  updateProcedure(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    description\n  }\n}"

  public var input: UpdateProcedureInput
  public var condition: ModelProcedureConditionInput?

  public init(input: UpdateProcedureInput, condition: ModelProcedureConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateProcedure", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateProcedure.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateProcedure: UpdateProcedure? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateProcedure": updateProcedure.flatMap { $0.snapshot }])
    }

    public var updateProcedure: UpdateProcedure? {
      get {
        return (snapshot["updateProcedure"] as? Snapshot).flatMap { UpdateProcedure(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateProcedure")
      }
    }

    public struct UpdateProcedure: GraphQLSelectionSet {
      public static let possibleTypes = ["Procedure"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("description", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, description: String? = nil) {
        self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }
    }
  }
}

public final class DeleteProcedureMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteProcedure($input: DeleteProcedureInput!, $condition: ModelProcedureConditionInput) {\n  deleteProcedure(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    description\n  }\n}"

  public var input: DeleteProcedureInput
  public var condition: ModelProcedureConditionInput?

  public init(input: DeleteProcedureInput, condition: ModelProcedureConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteProcedure", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteProcedure.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteProcedure: DeleteProcedure? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteProcedure": deleteProcedure.flatMap { $0.snapshot }])
    }

    public var deleteProcedure: DeleteProcedure? {
      get {
        return (snapshot["deleteProcedure"] as? Snapshot).flatMap { DeleteProcedure(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteProcedure")
      }
    }

    public struct DeleteProcedure: GraphQLSelectionSet {
      public static let possibleTypes = ["Procedure"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("description", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, description: String? = nil) {
        self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }
    }
  }
}

public final class CreateUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateUser($input: CreateUserInput!, $condition: ModelUserConditionInput) {\n  createUser(input: $input, condition: $condition) {\n    __typename\n    id\n    orgID\n    userName\n    email\n    phone\n    firstName\n    lastName\n    npi\n    isRater\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public var input: CreateUserInput
  public var condition: ModelUserConditionInput?

  public init(input: CreateUserInput, condition: ModelUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createUser: CreateUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createUser": createUser.flatMap { $0.snapshot }])
    }

    public var createUser: CreateUser? {
      get {
        return (snapshot["createUser"] as? Snapshot).flatMap { CreateUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createUser")
      }
    }

    public struct CreateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("orgID", type: .scalar(GraphQLID.self)),
        GraphQLField("userName", type: .scalar(String.self)),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("firstName", type: .scalar(String.self)),
        GraphQLField("lastName", type: .scalar(String.self)),
        GraphQLField("npi", type: .scalar(Int.self)),
        GraphQLField("isRater", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var orgId: GraphQLID? {
        get {
          return snapshot["orgID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var userName: String? {
        get {
          return snapshot["userName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["firstName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["lastName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var npi: Int? {
        get {
          return snapshot["npi"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "npi")
        }
      }

      public var isRater: Bool? {
        get {
          return snapshot["isRater"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isRater")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateUser($input: UpdateUserInput!, $condition: ModelUserConditionInput) {\n  updateUser(input: $input, condition: $condition) {\n    __typename\n    id\n    orgID\n    userName\n    email\n    phone\n    firstName\n    lastName\n    npi\n    isRater\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public var input: UpdateUserInput
  public var condition: ModelUserConditionInput?

  public init(input: UpdateUserInput, condition: ModelUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateUser: UpdateUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateUser": updateUser.flatMap { $0.snapshot }])
    }

    public var updateUser: UpdateUser? {
      get {
        return (snapshot["updateUser"] as? Snapshot).flatMap { UpdateUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateUser")
      }
    }

    public struct UpdateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("orgID", type: .scalar(GraphQLID.self)),
        GraphQLField("userName", type: .scalar(String.self)),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("firstName", type: .scalar(String.self)),
        GraphQLField("lastName", type: .scalar(String.self)),
        GraphQLField("npi", type: .scalar(Int.self)),
        GraphQLField("isRater", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var orgId: GraphQLID? {
        get {
          return snapshot["orgID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var userName: String? {
        get {
          return snapshot["userName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["firstName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["lastName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var npi: Int? {
        get {
          return snapshot["npi"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "npi")
        }
      }

      public var isRater: Bool? {
        get {
          return snapshot["isRater"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isRater")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class DeleteUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteUser($input: DeleteUserInput!, $condition: ModelUserConditionInput) {\n  deleteUser(input: $input, condition: $condition) {\n    __typename\n    id\n    orgID\n    userName\n    email\n    phone\n    firstName\n    lastName\n    npi\n    isRater\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public var input: DeleteUserInput
  public var condition: ModelUserConditionInput?

  public init(input: DeleteUserInput, condition: ModelUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteUser: DeleteUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteUser": deleteUser.flatMap { $0.snapshot }])
    }

    public var deleteUser: DeleteUser? {
      get {
        return (snapshot["deleteUser"] as? Snapshot).flatMap { DeleteUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteUser")
      }
    }

    public struct DeleteUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("orgID", type: .scalar(GraphQLID.self)),
        GraphQLField("userName", type: .scalar(String.self)),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("firstName", type: .scalar(String.self)),
        GraphQLField("lastName", type: .scalar(String.self)),
        GraphQLField("npi", type: .scalar(Int.self)),
        GraphQLField("isRater", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var orgId: GraphQLID? {
        get {
          return snapshot["orgID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var userName: String? {
        get {
          return snapshot["userName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["firstName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["lastName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var npi: Int? {
        get {
          return snapshot["npi"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "npi")
        }
      }

      public var isRater: Bool? {
        get {
          return snapshot["isRater"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isRater")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class CreateCertificationRecordMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateCertificationRecord($input: CreateCertificationRecordInput!, $condition: ModelCertificationRecordConditionInput) {\n  createCertificationRecord(input: $input, condition: $condition) {\n    __typename\n    id\n    procedureId\n    procedure {\n      __typename\n      id\n      name\n      description\n    }\n    isCertified\n    certificationMethod\n    subjectId\n    subject {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    certificationLog {\n      __typename\n      items {\n        __typename\n        id\n        subject {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        subjectId\n        rater {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        raterId\n        procedure {\n          __typename\n          id\n          name\n          description\n        }\n        procedureId\n        evaluationDate\n        ratingLevel\n        certificationRecordId\n      }\n      nextToken\n    }\n    totalProcedureEvals\n  }\n}"

  public var input: CreateCertificationRecordInput
  public var condition: ModelCertificationRecordConditionInput?

  public init(input: CreateCertificationRecordInput, condition: ModelCertificationRecordConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createCertificationRecord", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateCertificationRecord.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createCertificationRecord: CreateCertificationRecord? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createCertificationRecord": createCertificationRecord.flatMap { $0.snapshot }])
    }

    public var createCertificationRecord: CreateCertificationRecord? {
      get {
        return (snapshot["createCertificationRecord"] as? Snapshot).flatMap { CreateCertificationRecord(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createCertificationRecord")
      }
    }

    public struct CreateCertificationRecord: GraphQLSelectionSet {
      public static let possibleTypes = ["CertificationRecord"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedure", type: .nonNull(.object(Procedure.selections))),
        GraphQLField("isCertified", type: .scalar(Bool.self)),
        GraphQLField("certificationMethod", type: .scalar(CertificationMethod.self)),
        GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
        GraphQLField("certificationLog", type: .object(CertificationLog.selections)),
        GraphQLField("totalProcedureEvals", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, procedureId: GraphQLID, procedure: Procedure, isCertified: Bool? = nil, certificationMethod: CertificationMethod? = nil, subjectId: GraphQLID, subject: Subject, certificationLog: CertificationLog? = nil, totalProcedureEvals: Int? = nil) {
        self.init(snapshot: ["__typename": "CertificationRecord", "id": id, "procedureId": procedureId, "procedure": procedure.snapshot, "isCertified": isCertified, "certificationMethod": certificationMethod, "subjectId": subjectId, "subject": subject.snapshot, "certificationLog": certificationLog.flatMap { $0.snapshot }, "totalProcedureEvals": totalProcedureEvals])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var procedureId: GraphQLID {
        get {
          return snapshot["procedureId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "procedureId")
        }
      }

      public var procedure: Procedure {
        get {
          return Procedure(snapshot: snapshot["procedure"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "procedure")
        }
      }

      public var isCertified: Bool? {
        get {
          return snapshot["isCertified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCertified")
        }
      }

      public var certificationMethod: CertificationMethod? {
        get {
          return snapshot["certificationMethod"] as? CertificationMethod
        }
        set {
          snapshot.updateValue(newValue, forKey: "certificationMethod")
        }
      }

      public var subjectId: GraphQLID {
        get {
          return snapshot["subjectId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "subjectId")
        }
      }

      public var subject: Subject {
        get {
          return Subject(snapshot: snapshot["subject"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "subject")
        }
      }

      public var certificationLog: CertificationLog? {
        get {
          return (snapshot["certificationLog"] as? Snapshot).flatMap { CertificationLog(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "certificationLog")
        }
      }

      public var totalProcedureEvals: Int? {
        get {
          return snapshot["totalProcedureEvals"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalProcedureEvals")
        }
      }

      public struct Procedure: GraphQLSelectionSet {
        public static let possibleTypes = ["Procedure"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, description: String? = nil) {
          self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }
      }

      public struct Subject: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct CertificationLog: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelEvaluationResponseConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelEvaluationResponseConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["EvaluationResponse"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
            GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("rater", type: .nonNull(.object(Rater.selections))),
            GraphQLField("raterId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("procedure", type: .object(Procedure.selections)),
            GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("evaluationDate", type: .nonNull(.scalar(String.self))),
            GraphQLField("ratingLevel", type: .scalar(Int.self)),
            GraphQLField("certificationRecordId", type: .scalar(GraphQLID.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, subject: Subject, subjectId: GraphQLID, rater: Rater, raterId: GraphQLID, procedure: Procedure? = nil, procedureId: GraphQLID, evaluationDate: String, ratingLevel: Int? = nil, certificationRecordId: GraphQLID? = nil) {
            self.init(snapshot: ["__typename": "EvaluationResponse", "id": id, "subject": subject.snapshot, "subjectId": subjectId, "rater": rater.snapshot, "raterId": raterId, "procedure": procedure.flatMap { $0.snapshot }, "procedureId": procedureId, "evaluationDate": evaluationDate, "ratingLevel": ratingLevel, "certificationRecordId": certificationRecordId])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var subject: Subject {
            get {
              return Subject(snapshot: snapshot["subject"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "subject")
            }
          }

          public var subjectId: GraphQLID {
            get {
              return snapshot["subjectId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "subjectId")
            }
          }

          public var rater: Rater {
            get {
              return Rater(snapshot: snapshot["rater"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "rater")
            }
          }

          public var raterId: GraphQLID {
            get {
              return snapshot["raterId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "raterId")
            }
          }

          public var procedure: Procedure? {
            get {
              return (snapshot["procedure"] as? Snapshot).flatMap { Procedure(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "procedure")
            }
          }

          public var procedureId: GraphQLID {
            get {
              return snapshot["procedureId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "procedureId")
            }
          }

          public var evaluationDate: String {
            get {
              return snapshot["evaluationDate"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "evaluationDate")
            }
          }

          public var ratingLevel: Int? {
            get {
              return snapshot["ratingLevel"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "ratingLevel")
            }
          }

          public var certificationRecordId: GraphQLID? {
            get {
              return snapshot["certificationRecordId"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "certificationRecordId")
            }
          }

          public struct Subject: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Rater: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Procedure: GraphQLSelectionSet {
            public static let possibleTypes = ["Procedure"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("description", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, description: String? = nil) {
              self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }
          }
        }
      }
    }
  }
}

public final class UpdateCertificationRecordMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateCertificationRecord($input: UpdateCertificationRecordInput!, $condition: ModelCertificationRecordConditionInput) {\n  updateCertificationRecord(input: $input, condition: $condition) {\n    __typename\n    id\n    procedureId\n    procedure {\n      __typename\n      id\n      name\n      description\n    }\n    isCertified\n    certificationMethod\n    subjectId\n    subject {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    certificationLog {\n      __typename\n      items {\n        __typename\n        id\n        subject {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        subjectId\n        rater {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        raterId\n        procedure {\n          __typename\n          id\n          name\n          description\n        }\n        procedureId\n        evaluationDate\n        ratingLevel\n        certificationRecordId\n      }\n      nextToken\n    }\n    totalProcedureEvals\n  }\n}"

  public var input: UpdateCertificationRecordInput
  public var condition: ModelCertificationRecordConditionInput?

  public init(input: UpdateCertificationRecordInput, condition: ModelCertificationRecordConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateCertificationRecord", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateCertificationRecord.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateCertificationRecord: UpdateCertificationRecord? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateCertificationRecord": updateCertificationRecord.flatMap { $0.snapshot }])
    }

    public var updateCertificationRecord: UpdateCertificationRecord? {
      get {
        return (snapshot["updateCertificationRecord"] as? Snapshot).flatMap { UpdateCertificationRecord(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateCertificationRecord")
      }
    }

    public struct UpdateCertificationRecord: GraphQLSelectionSet {
      public static let possibleTypes = ["CertificationRecord"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedure", type: .nonNull(.object(Procedure.selections))),
        GraphQLField("isCertified", type: .scalar(Bool.self)),
        GraphQLField("certificationMethod", type: .scalar(CertificationMethod.self)),
        GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
        GraphQLField("certificationLog", type: .object(CertificationLog.selections)),
        GraphQLField("totalProcedureEvals", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, procedureId: GraphQLID, procedure: Procedure, isCertified: Bool? = nil, certificationMethod: CertificationMethod? = nil, subjectId: GraphQLID, subject: Subject, certificationLog: CertificationLog? = nil, totalProcedureEvals: Int? = nil) {
        self.init(snapshot: ["__typename": "CertificationRecord", "id": id, "procedureId": procedureId, "procedure": procedure.snapshot, "isCertified": isCertified, "certificationMethod": certificationMethod, "subjectId": subjectId, "subject": subject.snapshot, "certificationLog": certificationLog.flatMap { $0.snapshot }, "totalProcedureEvals": totalProcedureEvals])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var procedureId: GraphQLID {
        get {
          return snapshot["procedureId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "procedureId")
        }
      }

      public var procedure: Procedure {
        get {
          return Procedure(snapshot: snapshot["procedure"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "procedure")
        }
      }

      public var isCertified: Bool? {
        get {
          return snapshot["isCertified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCertified")
        }
      }

      public var certificationMethod: CertificationMethod? {
        get {
          return snapshot["certificationMethod"] as? CertificationMethod
        }
        set {
          snapshot.updateValue(newValue, forKey: "certificationMethod")
        }
      }

      public var subjectId: GraphQLID {
        get {
          return snapshot["subjectId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "subjectId")
        }
      }

      public var subject: Subject {
        get {
          return Subject(snapshot: snapshot["subject"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "subject")
        }
      }

      public var certificationLog: CertificationLog? {
        get {
          return (snapshot["certificationLog"] as? Snapshot).flatMap { CertificationLog(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "certificationLog")
        }
      }

      public var totalProcedureEvals: Int? {
        get {
          return snapshot["totalProcedureEvals"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalProcedureEvals")
        }
      }

      public struct Procedure: GraphQLSelectionSet {
        public static let possibleTypes = ["Procedure"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, description: String? = nil) {
          self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }
      }

      public struct Subject: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct CertificationLog: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelEvaluationResponseConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelEvaluationResponseConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["EvaluationResponse"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
            GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("rater", type: .nonNull(.object(Rater.selections))),
            GraphQLField("raterId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("procedure", type: .object(Procedure.selections)),
            GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("evaluationDate", type: .nonNull(.scalar(String.self))),
            GraphQLField("ratingLevel", type: .scalar(Int.self)),
            GraphQLField("certificationRecordId", type: .scalar(GraphQLID.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, subject: Subject, subjectId: GraphQLID, rater: Rater, raterId: GraphQLID, procedure: Procedure? = nil, procedureId: GraphQLID, evaluationDate: String, ratingLevel: Int? = nil, certificationRecordId: GraphQLID? = nil) {
            self.init(snapshot: ["__typename": "EvaluationResponse", "id": id, "subject": subject.snapshot, "subjectId": subjectId, "rater": rater.snapshot, "raterId": raterId, "procedure": procedure.flatMap { $0.snapshot }, "procedureId": procedureId, "evaluationDate": evaluationDate, "ratingLevel": ratingLevel, "certificationRecordId": certificationRecordId])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var subject: Subject {
            get {
              return Subject(snapshot: snapshot["subject"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "subject")
            }
          }

          public var subjectId: GraphQLID {
            get {
              return snapshot["subjectId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "subjectId")
            }
          }

          public var rater: Rater {
            get {
              return Rater(snapshot: snapshot["rater"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "rater")
            }
          }

          public var raterId: GraphQLID {
            get {
              return snapshot["raterId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "raterId")
            }
          }

          public var procedure: Procedure? {
            get {
              return (snapshot["procedure"] as? Snapshot).flatMap { Procedure(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "procedure")
            }
          }

          public var procedureId: GraphQLID {
            get {
              return snapshot["procedureId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "procedureId")
            }
          }

          public var evaluationDate: String {
            get {
              return snapshot["evaluationDate"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "evaluationDate")
            }
          }

          public var ratingLevel: Int? {
            get {
              return snapshot["ratingLevel"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "ratingLevel")
            }
          }

          public var certificationRecordId: GraphQLID? {
            get {
              return snapshot["certificationRecordId"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "certificationRecordId")
            }
          }

          public struct Subject: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Rater: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Procedure: GraphQLSelectionSet {
            public static let possibleTypes = ["Procedure"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("description", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, description: String? = nil) {
              self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }
          }
        }
      }
    }
  }
}

public final class DeleteCertificationRecordMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteCertificationRecord($input: DeleteCertificationRecordInput!, $condition: ModelCertificationRecordConditionInput) {\n  deleteCertificationRecord(input: $input, condition: $condition) {\n    __typename\n    id\n    procedureId\n    procedure {\n      __typename\n      id\n      name\n      description\n    }\n    isCertified\n    certificationMethod\n    subjectId\n    subject {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    certificationLog {\n      __typename\n      items {\n        __typename\n        id\n        subject {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        subjectId\n        rater {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        raterId\n        procedure {\n          __typename\n          id\n          name\n          description\n        }\n        procedureId\n        evaluationDate\n        ratingLevel\n        certificationRecordId\n      }\n      nextToken\n    }\n    totalProcedureEvals\n  }\n}"

  public var input: DeleteCertificationRecordInput
  public var condition: ModelCertificationRecordConditionInput?

  public init(input: DeleteCertificationRecordInput, condition: ModelCertificationRecordConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteCertificationRecord", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteCertificationRecord.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteCertificationRecord: DeleteCertificationRecord? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteCertificationRecord": deleteCertificationRecord.flatMap { $0.snapshot }])
    }

    public var deleteCertificationRecord: DeleteCertificationRecord? {
      get {
        return (snapshot["deleteCertificationRecord"] as? Snapshot).flatMap { DeleteCertificationRecord(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteCertificationRecord")
      }
    }

    public struct DeleteCertificationRecord: GraphQLSelectionSet {
      public static let possibleTypes = ["CertificationRecord"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedure", type: .nonNull(.object(Procedure.selections))),
        GraphQLField("isCertified", type: .scalar(Bool.self)),
        GraphQLField("certificationMethod", type: .scalar(CertificationMethod.self)),
        GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
        GraphQLField("certificationLog", type: .object(CertificationLog.selections)),
        GraphQLField("totalProcedureEvals", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, procedureId: GraphQLID, procedure: Procedure, isCertified: Bool? = nil, certificationMethod: CertificationMethod? = nil, subjectId: GraphQLID, subject: Subject, certificationLog: CertificationLog? = nil, totalProcedureEvals: Int? = nil) {
        self.init(snapshot: ["__typename": "CertificationRecord", "id": id, "procedureId": procedureId, "procedure": procedure.snapshot, "isCertified": isCertified, "certificationMethod": certificationMethod, "subjectId": subjectId, "subject": subject.snapshot, "certificationLog": certificationLog.flatMap { $0.snapshot }, "totalProcedureEvals": totalProcedureEvals])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var procedureId: GraphQLID {
        get {
          return snapshot["procedureId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "procedureId")
        }
      }

      public var procedure: Procedure {
        get {
          return Procedure(snapshot: snapshot["procedure"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "procedure")
        }
      }

      public var isCertified: Bool? {
        get {
          return snapshot["isCertified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCertified")
        }
      }

      public var certificationMethod: CertificationMethod? {
        get {
          return snapshot["certificationMethod"] as? CertificationMethod
        }
        set {
          snapshot.updateValue(newValue, forKey: "certificationMethod")
        }
      }

      public var subjectId: GraphQLID {
        get {
          return snapshot["subjectId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "subjectId")
        }
      }

      public var subject: Subject {
        get {
          return Subject(snapshot: snapshot["subject"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "subject")
        }
      }

      public var certificationLog: CertificationLog? {
        get {
          return (snapshot["certificationLog"] as? Snapshot).flatMap { CertificationLog(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "certificationLog")
        }
      }

      public var totalProcedureEvals: Int? {
        get {
          return snapshot["totalProcedureEvals"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalProcedureEvals")
        }
      }

      public struct Procedure: GraphQLSelectionSet {
        public static let possibleTypes = ["Procedure"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, description: String? = nil) {
          self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }
      }

      public struct Subject: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct CertificationLog: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelEvaluationResponseConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelEvaluationResponseConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["EvaluationResponse"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
            GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("rater", type: .nonNull(.object(Rater.selections))),
            GraphQLField("raterId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("procedure", type: .object(Procedure.selections)),
            GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("evaluationDate", type: .nonNull(.scalar(String.self))),
            GraphQLField("ratingLevel", type: .scalar(Int.self)),
            GraphQLField("certificationRecordId", type: .scalar(GraphQLID.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, subject: Subject, subjectId: GraphQLID, rater: Rater, raterId: GraphQLID, procedure: Procedure? = nil, procedureId: GraphQLID, evaluationDate: String, ratingLevel: Int? = nil, certificationRecordId: GraphQLID? = nil) {
            self.init(snapshot: ["__typename": "EvaluationResponse", "id": id, "subject": subject.snapshot, "subjectId": subjectId, "rater": rater.snapshot, "raterId": raterId, "procedure": procedure.flatMap { $0.snapshot }, "procedureId": procedureId, "evaluationDate": evaluationDate, "ratingLevel": ratingLevel, "certificationRecordId": certificationRecordId])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var subject: Subject {
            get {
              return Subject(snapshot: snapshot["subject"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "subject")
            }
          }

          public var subjectId: GraphQLID {
            get {
              return snapshot["subjectId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "subjectId")
            }
          }

          public var rater: Rater {
            get {
              return Rater(snapshot: snapshot["rater"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "rater")
            }
          }

          public var raterId: GraphQLID {
            get {
              return snapshot["raterId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "raterId")
            }
          }

          public var procedure: Procedure? {
            get {
              return (snapshot["procedure"] as? Snapshot).flatMap { Procedure(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "procedure")
            }
          }

          public var procedureId: GraphQLID {
            get {
              return snapshot["procedureId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "procedureId")
            }
          }

          public var evaluationDate: String {
            get {
              return snapshot["evaluationDate"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "evaluationDate")
            }
          }

          public var ratingLevel: Int? {
            get {
              return snapshot["ratingLevel"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "ratingLevel")
            }
          }

          public var certificationRecordId: GraphQLID? {
            get {
              return snapshot["certificationRecordId"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "certificationRecordId")
            }
          }

          public struct Subject: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Rater: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Procedure: GraphQLSelectionSet {
            public static let possibleTypes = ["Procedure"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("description", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, description: String? = nil) {
              self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }
          }
        }
      }
    }
  }
}

public final class NewEvaluationResponseQuery: GraphQLQuery {
  public static let operationString =
    "query NewEvaluationResponse($evaluationResponse: CreateEvaluationResponseInput) {\n  newEvaluationResponse(evaluationResponse: $evaluationResponse)\n}"

  public var evaluationResponse: CreateEvaluationResponseInput?

  public init(evaluationResponse: CreateEvaluationResponseInput? = nil) {
    self.evaluationResponse = evaluationResponse
  }

  public var variables: GraphQLMap? {
    return ["evaluationResponse": evaluationResponse]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("newEvaluationResponse", arguments: ["evaluationResponse": GraphQLVariable("evaluationResponse")], type: .scalar(String.self)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(newEvaluationResponse: String? = nil) {
      self.init(snapshot: ["__typename": "Query", "newEvaluationResponse": newEvaluationResponse])
    }

    public var newEvaluationResponse: String? {
      get {
        return snapshot["newEvaluationResponse"] as? String
      }
      set {
        snapshot.updateValue(newValue, forKey: "newEvaluationResponse")
      }
    }
  }
}

public final class GetOrganizationQuery: GraphQLQuery {
  public static let operationString =
    "query GetOrganization($id: ID!) {\n  getOrganization(id: $id) {\n    __typename\n    id\n    title\n    description\n    programs {\n      __typename\n      items {\n        __typename\n        id\n        name\n        orgID\n        description\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            role\n            userId\n            programId\n          }\n          nextToken\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getOrganization", arguments: ["id": GraphQLVariable("id")], type: .object(GetOrganization.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getOrganization: GetOrganization? = nil) {
      self.init(snapshot: ["__typename": "Query", "getOrganization": getOrganization.flatMap { $0.snapshot }])
    }

    public var getOrganization: GetOrganization? {
      get {
        return (snapshot["getOrganization"] as? Snapshot).flatMap { GetOrganization(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getOrganization")
      }
    }

    public struct GetOrganization: GraphQLSelectionSet {
      public static let possibleTypes = ["Organization"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("programs", type: .object(Program.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, title: String? = nil, description: String? = nil, programs: Program? = nil) {
        self.init(snapshot: ["__typename": "Organization", "id": id, "title": title, "description": description, "programs": programs.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var programs: Program? {
        get {
          return (snapshot["programs"] as? Snapshot).flatMap { Program(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "programs")
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelProgramConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelProgramConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Program"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
            self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var orgId: GraphQLID {
            get {
              return snapshot["orgID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "orgID")
            }
          }

          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelMembershipConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Membership"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .nonNull(.scalar(Role.self))),
                GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, role: Role, userId: GraphQLID, programId: GraphQLID) {
                self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "programId": programId])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var role: Role {
                get {
                  return snapshot["role"]! as! Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userId")
                }
              }

              public var programId: GraphQLID {
                get {
                  return snapshot["programId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "programId")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class ListOrganizationsQuery: GraphQLQuery {
  public static let operationString =
    "query ListOrganizations($filter: ModelOrganizationFilterInput, $limit: Int, $nextToken: String) {\n  listOrganizations(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      title\n      description\n      programs {\n        __typename\n        items {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        nextToken\n      }\n    }\n    nextToken\n  }\n}"

  public var filter: ModelOrganizationFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelOrganizationFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listOrganizations", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListOrganization.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listOrganizations: ListOrganization? = nil) {
      self.init(snapshot: ["__typename": "Query", "listOrganizations": listOrganizations.flatMap { $0.snapshot }])
    }

    public var listOrganizations: ListOrganization? {
      get {
        return (snapshot["listOrganizations"] as? Snapshot).flatMap { ListOrganization(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listOrganizations")
      }
    }

    public struct ListOrganization: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelOrganizationConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelOrganizationConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Organization"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("programs", type: .object(Program.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, title: String? = nil, description: String? = nil, programs: Program? = nil) {
          self.init(snapshot: ["__typename": "Organization", "id": id, "title": title, "description": description, "programs": programs.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var title: String? {
          get {
            return snapshot["title"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "title")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        public var programs: Program? {
          get {
            return (snapshot["programs"] as? Snapshot).flatMap { Program(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "programs")
          }
        }

        public struct Program: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelProgramConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelProgramConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class GetProgramQuery: GraphQLQuery {
  public static let operationString =
    "query GetProgram($id: ID!) {\n  getProgram(id: $id) {\n    __typename\n    id\n    name\n    orgID\n    description\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getProgram", arguments: ["id": GraphQLVariable("id")], type: .object(GetProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getProgram: GetProgram? = nil) {
      self.init(snapshot: ["__typename": "Query", "getProgram": getProgram.flatMap { $0.snapshot }])
    }

    public var getProgram: GetProgram? {
      get {
        return (snapshot["getProgram"] as? Snapshot).flatMap { GetProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getProgram")
      }
    }

    public struct GetProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["Program"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var orgId: GraphQLID {
        get {
          return snapshot["orgID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class ListProgramsQuery: GraphQLQuery {
  public static let operationString =
    "query ListPrograms($filter: ModelProgramFilterInput, $limit: Int, $nextToken: String) {\n  listPrograms(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      orgID\n      description\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    nextToken\n  }\n}"

  public var filter: ModelProgramFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelProgramFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listPrograms", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listPrograms: ListProgram? = nil) {
      self.init(snapshot: ["__typename": "Query", "listPrograms": listPrograms.flatMap { $0.snapshot }])
    }

    public var listPrograms: ListProgram? {
      get {
        return (snapshot["listPrograms"] as? Snapshot).flatMap { ListProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listPrograms")
      }
    }

    public struct ListProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelProgramConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelProgramConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Program"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var orgId: GraphQLID {
          get {
            return snapshot["orgID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class GetMembershipQuery: GraphQLQuery {
  public static let operationString =
    "query GetMembership($id: ID!) {\n  getMembership(id: $id) {\n    __typename\n    id\n    role\n    userId\n    user {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    programId\n    program {\n      __typename\n      id\n      name\n      orgID\n      description\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getMembership", arguments: ["id": GraphQLVariable("id")], type: .object(GetMembership.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getMembership: GetMembership? = nil) {
      self.init(snapshot: ["__typename": "Query", "getMembership": getMembership.flatMap { $0.snapshot }])
    }

    public var getMembership: GetMembership? {
      get {
        return (snapshot["getMembership"] as? Snapshot).flatMap { GetMembership(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getMembership")
      }
    }

    public struct GetMembership: GraphQLSelectionSet {
      public static let possibleTypes = ["Membership"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("role", type: .nonNull(.scalar(Role.self))),
        GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("program", type: .nonNull(.object(Program.selections))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
        self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var role: Role {
        get {
          return snapshot["role"]! as! Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userId")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var programId: GraphQLID {
        get {
          return snapshot["programId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "programId")
        }
      }

      public var program: Program {
        get {
          return Program(snapshot: snapshot["program"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "program")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["Program"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var orgId: GraphQLID {
          get {
            return snapshot["orgID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class ListMembershipsQuery: GraphQLQuery {
  public static let operationString =
    "query ListMemberships($filter: ModelMembershipFilterInput, $limit: Int, $nextToken: String) {\n  listMemberships(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      role\n      userId\n      user {\n        __typename\n        id\n        orgID\n        userName\n        email\n        phone\n        firstName\n        lastName\n        npi\n        isRater\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            role\n            userId\n            programId\n          }\n          nextToken\n        }\n      }\n      programId\n      program {\n        __typename\n        id\n        name\n        orgID\n        description\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            role\n            userId\n            programId\n          }\n          nextToken\n        }\n      }\n    }\n    nextToken\n  }\n}"

  public var filter: ModelMembershipFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelMembershipFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listMemberships", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListMembership.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listMemberships: ListMembership? = nil) {
      self.init(snapshot: ["__typename": "Query", "listMemberships": listMemberships.flatMap { $0.snapshot }])
    }

    public var listMemberships: ListMembership? {
      get {
        return (snapshot["listMemberships"] as? Snapshot).flatMap { ListMembership(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listMemberships")
      }
    }

    public struct ListMembership: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelMembershipConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Membership"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("role", type: .nonNull(.scalar(Role.self))),
          GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("user", type: .nonNull(.object(User.selections))),
          GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("program", type: .nonNull(.object(Program.selections))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
          self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var role: Role {
          get {
            return snapshot["role"]! as! Role
          }
          set {
            snapshot.updateValue(newValue, forKey: "role")
          }
        }

        public var userId: GraphQLID {
          get {
            return snapshot["userId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userId")
          }
        }

        public var user: User {
          get {
            return User(snapshot: snapshot["user"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "user")
          }
        }

        public var programId: GraphQLID {
          get {
            return snapshot["programId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "programId")
          }
        }

        public var program: Program {
          get {
            return Program(snapshot: snapshot["program"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "program")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("orgID", type: .scalar(GraphQLID.self)),
            GraphQLField("userName", type: .scalar(String.self)),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("phone", type: .scalar(String.self)),
            GraphQLField("firstName", type: .scalar(String.self)),
            GraphQLField("lastName", type: .scalar(String.self)),
            GraphQLField("npi", type: .scalar(Int.self)),
            GraphQLField("isRater", type: .scalar(Bool.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
            self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var orgId: GraphQLID? {
            get {
              return snapshot["orgID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "orgID")
            }
          }

          public var userName: String? {
            get {
              return snapshot["userName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "userName")
            }
          }

          public var email: String {
            get {
              return snapshot["email"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var phone: String? {
            get {
              return snapshot["phone"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "phone")
            }
          }

          public var firstName: String? {
            get {
              return snapshot["firstName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "firstName")
            }
          }

          public var lastName: String? {
            get {
              return snapshot["lastName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "lastName")
            }
          }

          public var npi: Int? {
            get {
              return snapshot["npi"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "npi")
            }
          }

          public var isRater: Bool? {
            get {
              return snapshot["isRater"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isRater")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelMembershipConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Membership"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .nonNull(.scalar(Role.self))),
                GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, role: Role, userId: GraphQLID, programId: GraphQLID) {
                self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "programId": programId])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var role: Role {
                get {
                  return snapshot["role"]! as! Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userId")
                }
              }

              public var programId: GraphQLID {
                get {
                  return snapshot["programId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "programId")
                }
              }
            }
          }
        }

        public struct Program: GraphQLSelectionSet {
          public static let possibleTypes = ["Program"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
            self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var orgId: GraphQLID {
            get {
              return snapshot["orgID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "orgID")
            }
          }

          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelMembershipConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Membership"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .nonNull(.scalar(Role.self))),
                GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, role: Role, userId: GraphQLID, programId: GraphQLID) {
                self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "programId": programId])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var role: Role {
                get {
                  return snapshot["role"]! as! Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userId")
                }
              }

              public var programId: GraphQLID {
                get {
                  return snapshot["programId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "programId")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class GetProcedureQuery: GraphQLQuery {
  public static let operationString =
    "query GetProcedure($id: ID!) {\n  getProcedure(id: $id) {\n    __typename\n    id\n    name\n    description\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getProcedure", arguments: ["id": GraphQLVariable("id")], type: .object(GetProcedure.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getProcedure: GetProcedure? = nil) {
      self.init(snapshot: ["__typename": "Query", "getProcedure": getProcedure.flatMap { $0.snapshot }])
    }

    public var getProcedure: GetProcedure? {
      get {
        return (snapshot["getProcedure"] as? Snapshot).flatMap { GetProcedure(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getProcedure")
      }
    }

    public struct GetProcedure: GraphQLSelectionSet {
      public static let possibleTypes = ["Procedure"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("description", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, description: String? = nil) {
        self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }
    }
  }
}

public final class ListProceduresQuery: GraphQLQuery {
  public static let operationString =
    "query ListProcedures($filter: ModelProcedureFilterInput, $limit: Int, $nextToken: String) {\n  listProcedures(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      description\n    }\n    nextToken\n  }\n}"

  public var filter: ModelProcedureFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelProcedureFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listProcedures", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListProcedure.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listProcedures: ListProcedure? = nil) {
      self.init(snapshot: ["__typename": "Query", "listProcedures": listProcedures.flatMap { $0.snapshot }])
    }

    public var listProcedures: ListProcedure? {
      get {
        return (snapshot["listProcedures"] as? Snapshot).flatMap { ListProcedure(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listProcedures")
      }
    }

    public struct ListProcedure: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelProcedureConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelProcedureConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Procedure"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, description: String? = nil) {
          self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }
      }
    }
  }
}

public final class GetUserQuery: GraphQLQuery {
  public static let operationString =
    "query GetUser($id: ID!) {\n  getUser(id: $id) {\n    __typename\n    id\n    orgID\n    userName\n    email\n    phone\n    firstName\n    lastName\n    npi\n    isRater\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getUser", arguments: ["id": GraphQLVariable("id")], type: .object(GetUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getUser: GetUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "getUser": getUser.flatMap { $0.snapshot }])
    }

    public var getUser: GetUser? {
      get {
        return (snapshot["getUser"] as? Snapshot).flatMap { GetUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getUser")
      }
    }

    public struct GetUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("orgID", type: .scalar(GraphQLID.self)),
        GraphQLField("userName", type: .scalar(String.self)),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("firstName", type: .scalar(String.self)),
        GraphQLField("lastName", type: .scalar(String.self)),
        GraphQLField("npi", type: .scalar(Int.self)),
        GraphQLField("isRater", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var orgId: GraphQLID? {
        get {
          return snapshot["orgID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var userName: String? {
        get {
          return snapshot["userName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["firstName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["lastName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var npi: Int? {
        get {
          return snapshot["npi"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "npi")
        }
      }

      public var isRater: Bool? {
        get {
          return snapshot["isRater"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isRater")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class ListUsersQuery: GraphQLQuery {
  public static let operationString =
    "query ListUsers($filter: ModelUserFilterInput, $limit: Int, $nextToken: String) {\n  listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    nextToken\n  }\n}"

  public var filter: ModelUserFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listUsers: ListUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "listUsers": listUsers.flatMap { $0.snapshot }])
    }

    public var listUsers: ListUser? {
      get {
        return (snapshot["listUsers"] as? Snapshot).flatMap { ListUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listUsers")
      }
    }

    public struct ListUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class GetEvaluationResponseQuery: GraphQLQuery {
  public static let operationString =
    "query GetEvaluationResponse($id: ID!) {\n  getEvaluationResponse(id: $id) {\n    __typename\n    id\n    subject {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    subjectId\n    rater {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    raterId\n    procedure {\n      __typename\n      id\n      name\n      description\n    }\n    procedureId\n    evaluationDate\n    ratingLevel\n    certificationRecordId\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getEvaluationResponse", arguments: ["id": GraphQLVariable("id")], type: .object(GetEvaluationResponse.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getEvaluationResponse: GetEvaluationResponse? = nil) {
      self.init(snapshot: ["__typename": "Query", "getEvaluationResponse": getEvaluationResponse.flatMap { $0.snapshot }])
    }

    public var getEvaluationResponse: GetEvaluationResponse? {
      get {
        return (snapshot["getEvaluationResponse"] as? Snapshot).flatMap { GetEvaluationResponse(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getEvaluationResponse")
      }
    }

    public struct GetEvaluationResponse: GraphQLSelectionSet {
      public static let possibleTypes = ["EvaluationResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
        GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("rater", type: .nonNull(.object(Rater.selections))),
        GraphQLField("raterId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedure", type: .object(Procedure.selections)),
        GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("evaluationDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("ratingLevel", type: .scalar(Int.self)),
        GraphQLField("certificationRecordId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, subject: Subject, subjectId: GraphQLID, rater: Rater, raterId: GraphQLID, procedure: Procedure? = nil, procedureId: GraphQLID, evaluationDate: String, ratingLevel: Int? = nil, certificationRecordId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "EvaluationResponse", "id": id, "subject": subject.snapshot, "subjectId": subjectId, "rater": rater.snapshot, "raterId": raterId, "procedure": procedure.flatMap { $0.snapshot }, "procedureId": procedureId, "evaluationDate": evaluationDate, "ratingLevel": ratingLevel, "certificationRecordId": certificationRecordId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var subject: Subject {
        get {
          return Subject(snapshot: snapshot["subject"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "subject")
        }
      }

      public var subjectId: GraphQLID {
        get {
          return snapshot["subjectId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "subjectId")
        }
      }

      public var rater: Rater {
        get {
          return Rater(snapshot: snapshot["rater"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "rater")
        }
      }

      public var raterId: GraphQLID {
        get {
          return snapshot["raterId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "raterId")
        }
      }

      public var procedure: Procedure? {
        get {
          return (snapshot["procedure"] as? Snapshot).flatMap { Procedure(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "procedure")
        }
      }

      public var procedureId: GraphQLID {
        get {
          return snapshot["procedureId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "procedureId")
        }
      }

      public var evaluationDate: String {
        get {
          return snapshot["evaluationDate"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "evaluationDate")
        }
      }

      public var ratingLevel: Int? {
        get {
          return snapshot["ratingLevel"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "ratingLevel")
        }
      }

      public var certificationRecordId: GraphQLID? {
        get {
          return snapshot["certificationRecordId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "certificationRecordId")
        }
      }

      public struct Subject: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct Rater: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct Procedure: GraphQLSelectionSet {
        public static let possibleTypes = ["Procedure"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, description: String? = nil) {
          self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }
      }
    }
  }
}

public final class ListEvaluationResponsesQuery: GraphQLQuery {
  public static let operationString =
    "query ListEvaluationResponses($filter: ModelEvaluationResponseFilterInput, $limit: Int, $nextToken: String) {\n  listEvaluationResponses(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      subject {\n        __typename\n        id\n        orgID\n        userName\n        email\n        phone\n        firstName\n        lastName\n        npi\n        isRater\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            role\n            userId\n            programId\n          }\n          nextToken\n        }\n      }\n      subjectId\n      rater {\n        __typename\n        id\n        orgID\n        userName\n        email\n        phone\n        firstName\n        lastName\n        npi\n        isRater\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            role\n            userId\n            programId\n          }\n          nextToken\n        }\n      }\n      raterId\n      procedure {\n        __typename\n        id\n        name\n        description\n      }\n      procedureId\n      evaluationDate\n      ratingLevel\n      certificationRecordId\n    }\n    nextToken\n  }\n}"

  public var filter: ModelEvaluationResponseFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelEvaluationResponseFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listEvaluationResponses", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListEvaluationResponse.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listEvaluationResponses: ListEvaluationResponse? = nil) {
      self.init(snapshot: ["__typename": "Query", "listEvaluationResponses": listEvaluationResponses.flatMap { $0.snapshot }])
    }

    public var listEvaluationResponses: ListEvaluationResponse? {
      get {
        return (snapshot["listEvaluationResponses"] as? Snapshot).flatMap { ListEvaluationResponse(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listEvaluationResponses")
      }
    }

    public struct ListEvaluationResponse: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelEvaluationResponseConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelEvaluationResponseConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["EvaluationResponse"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
          GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("rater", type: .nonNull(.object(Rater.selections))),
          GraphQLField("raterId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("procedure", type: .object(Procedure.selections)),
          GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("evaluationDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("ratingLevel", type: .scalar(Int.self)),
          GraphQLField("certificationRecordId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, subject: Subject, subjectId: GraphQLID, rater: Rater, raterId: GraphQLID, procedure: Procedure? = nil, procedureId: GraphQLID, evaluationDate: String, ratingLevel: Int? = nil, certificationRecordId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "EvaluationResponse", "id": id, "subject": subject.snapshot, "subjectId": subjectId, "rater": rater.snapshot, "raterId": raterId, "procedure": procedure.flatMap { $0.snapshot }, "procedureId": procedureId, "evaluationDate": evaluationDate, "ratingLevel": ratingLevel, "certificationRecordId": certificationRecordId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var subject: Subject {
          get {
            return Subject(snapshot: snapshot["subject"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "subject")
          }
        }

        public var subjectId: GraphQLID {
          get {
            return snapshot["subjectId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "subjectId")
          }
        }

        public var rater: Rater {
          get {
            return Rater(snapshot: snapshot["rater"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "rater")
          }
        }

        public var raterId: GraphQLID {
          get {
            return snapshot["raterId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "raterId")
          }
        }

        public var procedure: Procedure? {
          get {
            return (snapshot["procedure"] as? Snapshot).flatMap { Procedure(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "procedure")
          }
        }

        public var procedureId: GraphQLID {
          get {
            return snapshot["procedureId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "procedureId")
          }
        }

        public var evaluationDate: String {
          get {
            return snapshot["evaluationDate"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "evaluationDate")
          }
        }

        public var ratingLevel: Int? {
          get {
            return snapshot["ratingLevel"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "ratingLevel")
          }
        }

        public var certificationRecordId: GraphQLID? {
          get {
            return snapshot["certificationRecordId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "certificationRecordId")
          }
        }

        public struct Subject: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("orgID", type: .scalar(GraphQLID.self)),
            GraphQLField("userName", type: .scalar(String.self)),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("phone", type: .scalar(String.self)),
            GraphQLField("firstName", type: .scalar(String.self)),
            GraphQLField("lastName", type: .scalar(String.self)),
            GraphQLField("npi", type: .scalar(Int.self)),
            GraphQLField("isRater", type: .scalar(Bool.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
            self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var orgId: GraphQLID? {
            get {
              return snapshot["orgID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "orgID")
            }
          }

          public var userName: String? {
            get {
              return snapshot["userName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "userName")
            }
          }

          public var email: String {
            get {
              return snapshot["email"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var phone: String? {
            get {
              return snapshot["phone"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "phone")
            }
          }

          public var firstName: String? {
            get {
              return snapshot["firstName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "firstName")
            }
          }

          public var lastName: String? {
            get {
              return snapshot["lastName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "lastName")
            }
          }

          public var npi: Int? {
            get {
              return snapshot["npi"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "npi")
            }
          }

          public var isRater: Bool? {
            get {
              return snapshot["isRater"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isRater")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelMembershipConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Membership"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .nonNull(.scalar(Role.self))),
                GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, role: Role, userId: GraphQLID, programId: GraphQLID) {
                self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "programId": programId])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var role: Role {
                get {
                  return snapshot["role"]! as! Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userId")
                }
              }

              public var programId: GraphQLID {
                get {
                  return snapshot["programId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "programId")
                }
              }
            }
          }
        }

        public struct Rater: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("orgID", type: .scalar(GraphQLID.self)),
            GraphQLField("userName", type: .scalar(String.self)),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("phone", type: .scalar(String.self)),
            GraphQLField("firstName", type: .scalar(String.self)),
            GraphQLField("lastName", type: .scalar(String.self)),
            GraphQLField("npi", type: .scalar(Int.self)),
            GraphQLField("isRater", type: .scalar(Bool.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
            self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var orgId: GraphQLID? {
            get {
              return snapshot["orgID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "orgID")
            }
          }

          public var userName: String? {
            get {
              return snapshot["userName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "userName")
            }
          }

          public var email: String {
            get {
              return snapshot["email"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var phone: String? {
            get {
              return snapshot["phone"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "phone")
            }
          }

          public var firstName: String? {
            get {
              return snapshot["firstName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "firstName")
            }
          }

          public var lastName: String? {
            get {
              return snapshot["lastName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "lastName")
            }
          }

          public var npi: Int? {
            get {
              return snapshot["npi"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "npi")
            }
          }

          public var isRater: Bool? {
            get {
              return snapshot["isRater"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isRater")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelMembershipConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Membership"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .nonNull(.scalar(Role.self))),
                GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, role: Role, userId: GraphQLID, programId: GraphQLID) {
                self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "programId": programId])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var role: Role {
                get {
                  return snapshot["role"]! as! Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userId")
                }
              }

              public var programId: GraphQLID {
                get {
                  return snapshot["programId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "programId")
                }
              }
            }
          }
        }

        public struct Procedure: GraphQLSelectionSet {
          public static let possibleTypes = ["Procedure"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("description", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, description: String? = nil) {
            self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }
        }
      }
    }
  }
}

public final class GetCertificationRecordQuery: GraphQLQuery {
  public static let operationString =
    "query GetCertificationRecord($id: ID!) {\n  getCertificationRecord(id: $id) {\n    __typename\n    id\n    procedureId\n    procedure {\n      __typename\n      id\n      name\n      description\n    }\n    isCertified\n    certificationMethod\n    subjectId\n    subject {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    certificationLog {\n      __typename\n      items {\n        __typename\n        id\n        subject {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        subjectId\n        rater {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        raterId\n        procedure {\n          __typename\n          id\n          name\n          description\n        }\n        procedureId\n        evaluationDate\n        ratingLevel\n        certificationRecordId\n      }\n      nextToken\n    }\n    totalProcedureEvals\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getCertificationRecord", arguments: ["id": GraphQLVariable("id")], type: .object(GetCertificationRecord.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getCertificationRecord: GetCertificationRecord? = nil) {
      self.init(snapshot: ["__typename": "Query", "getCertificationRecord": getCertificationRecord.flatMap { $0.snapshot }])
    }

    public var getCertificationRecord: GetCertificationRecord? {
      get {
        return (snapshot["getCertificationRecord"] as? Snapshot).flatMap { GetCertificationRecord(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getCertificationRecord")
      }
    }

    public struct GetCertificationRecord: GraphQLSelectionSet {
      public static let possibleTypes = ["CertificationRecord"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedure", type: .nonNull(.object(Procedure.selections))),
        GraphQLField("isCertified", type: .scalar(Bool.self)),
        GraphQLField("certificationMethod", type: .scalar(CertificationMethod.self)),
        GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
        GraphQLField("certificationLog", type: .object(CertificationLog.selections)),
        GraphQLField("totalProcedureEvals", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, procedureId: GraphQLID, procedure: Procedure, isCertified: Bool? = nil, certificationMethod: CertificationMethod? = nil, subjectId: GraphQLID, subject: Subject, certificationLog: CertificationLog? = nil, totalProcedureEvals: Int? = nil) {
        self.init(snapshot: ["__typename": "CertificationRecord", "id": id, "procedureId": procedureId, "procedure": procedure.snapshot, "isCertified": isCertified, "certificationMethod": certificationMethod, "subjectId": subjectId, "subject": subject.snapshot, "certificationLog": certificationLog.flatMap { $0.snapshot }, "totalProcedureEvals": totalProcedureEvals])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var procedureId: GraphQLID {
        get {
          return snapshot["procedureId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "procedureId")
        }
      }

      public var procedure: Procedure {
        get {
          return Procedure(snapshot: snapshot["procedure"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "procedure")
        }
      }

      public var isCertified: Bool? {
        get {
          return snapshot["isCertified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCertified")
        }
      }

      public var certificationMethod: CertificationMethod? {
        get {
          return snapshot["certificationMethod"] as? CertificationMethod
        }
        set {
          snapshot.updateValue(newValue, forKey: "certificationMethod")
        }
      }

      public var subjectId: GraphQLID {
        get {
          return snapshot["subjectId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "subjectId")
        }
      }

      public var subject: Subject {
        get {
          return Subject(snapshot: snapshot["subject"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "subject")
        }
      }

      public var certificationLog: CertificationLog? {
        get {
          return (snapshot["certificationLog"] as? Snapshot).flatMap { CertificationLog(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "certificationLog")
        }
      }

      public var totalProcedureEvals: Int? {
        get {
          return snapshot["totalProcedureEvals"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalProcedureEvals")
        }
      }

      public struct Procedure: GraphQLSelectionSet {
        public static let possibleTypes = ["Procedure"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, description: String? = nil) {
          self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }
      }

      public struct Subject: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct CertificationLog: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelEvaluationResponseConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelEvaluationResponseConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["EvaluationResponse"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
            GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("rater", type: .nonNull(.object(Rater.selections))),
            GraphQLField("raterId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("procedure", type: .object(Procedure.selections)),
            GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("evaluationDate", type: .nonNull(.scalar(String.self))),
            GraphQLField("ratingLevel", type: .scalar(Int.self)),
            GraphQLField("certificationRecordId", type: .scalar(GraphQLID.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, subject: Subject, subjectId: GraphQLID, rater: Rater, raterId: GraphQLID, procedure: Procedure? = nil, procedureId: GraphQLID, evaluationDate: String, ratingLevel: Int? = nil, certificationRecordId: GraphQLID? = nil) {
            self.init(snapshot: ["__typename": "EvaluationResponse", "id": id, "subject": subject.snapshot, "subjectId": subjectId, "rater": rater.snapshot, "raterId": raterId, "procedure": procedure.flatMap { $0.snapshot }, "procedureId": procedureId, "evaluationDate": evaluationDate, "ratingLevel": ratingLevel, "certificationRecordId": certificationRecordId])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var subject: Subject {
            get {
              return Subject(snapshot: snapshot["subject"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "subject")
            }
          }

          public var subjectId: GraphQLID {
            get {
              return snapshot["subjectId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "subjectId")
            }
          }

          public var rater: Rater {
            get {
              return Rater(snapshot: snapshot["rater"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "rater")
            }
          }

          public var raterId: GraphQLID {
            get {
              return snapshot["raterId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "raterId")
            }
          }

          public var procedure: Procedure? {
            get {
              return (snapshot["procedure"] as? Snapshot).flatMap { Procedure(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "procedure")
            }
          }

          public var procedureId: GraphQLID {
            get {
              return snapshot["procedureId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "procedureId")
            }
          }

          public var evaluationDate: String {
            get {
              return snapshot["evaluationDate"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "evaluationDate")
            }
          }

          public var ratingLevel: Int? {
            get {
              return snapshot["ratingLevel"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "ratingLevel")
            }
          }

          public var certificationRecordId: GraphQLID? {
            get {
              return snapshot["certificationRecordId"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "certificationRecordId")
            }
          }

          public struct Subject: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Rater: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Procedure: GraphQLSelectionSet {
            public static let possibleTypes = ["Procedure"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("description", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, description: String? = nil) {
              self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }
          }
        }
      }
    }
  }
}

public final class ListCertificationRecordsQuery: GraphQLQuery {
  public static let operationString =
    "query ListCertificationRecords($filter: ModelCertificationRecordFilterInput, $limit: Int, $nextToken: String) {\n  listCertificationRecords(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      procedureId\n      procedure {\n        __typename\n        id\n        name\n        description\n      }\n      isCertified\n      certificationMethod\n      subjectId\n      subject {\n        __typename\n        id\n        orgID\n        userName\n        email\n        phone\n        firstName\n        lastName\n        npi\n        isRater\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            role\n            userId\n            programId\n          }\n          nextToken\n        }\n      }\n      certificationLog {\n        __typename\n        items {\n          __typename\n          id\n          subject {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          subjectId\n          rater {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          raterId\n          procedure {\n            __typename\n            id\n            name\n            description\n          }\n          procedureId\n          evaluationDate\n          ratingLevel\n          certificationRecordId\n        }\n        nextToken\n      }\n      totalProcedureEvals\n    }\n    nextToken\n  }\n}"

  public var filter: ModelCertificationRecordFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelCertificationRecordFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listCertificationRecords", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListCertificationRecord.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listCertificationRecords: ListCertificationRecord? = nil) {
      self.init(snapshot: ["__typename": "Query", "listCertificationRecords": listCertificationRecords.flatMap { $0.snapshot }])
    }

    public var listCertificationRecords: ListCertificationRecord? {
      get {
        return (snapshot["listCertificationRecords"] as? Snapshot).flatMap { ListCertificationRecord(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listCertificationRecords")
      }
    }

    public struct ListCertificationRecord: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelCertificationRecordConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelCertificationRecordConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["CertificationRecord"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("procedure", type: .nonNull(.object(Procedure.selections))),
          GraphQLField("isCertified", type: .scalar(Bool.self)),
          GraphQLField("certificationMethod", type: .scalar(CertificationMethod.self)),
          GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
          GraphQLField("certificationLog", type: .object(CertificationLog.selections)),
          GraphQLField("totalProcedureEvals", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, procedureId: GraphQLID, procedure: Procedure, isCertified: Bool? = nil, certificationMethod: CertificationMethod? = nil, subjectId: GraphQLID, subject: Subject, certificationLog: CertificationLog? = nil, totalProcedureEvals: Int? = nil) {
          self.init(snapshot: ["__typename": "CertificationRecord", "id": id, "procedureId": procedureId, "procedure": procedure.snapshot, "isCertified": isCertified, "certificationMethod": certificationMethod, "subjectId": subjectId, "subject": subject.snapshot, "certificationLog": certificationLog.flatMap { $0.snapshot }, "totalProcedureEvals": totalProcedureEvals])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var procedureId: GraphQLID {
          get {
            return snapshot["procedureId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "procedureId")
          }
        }

        public var procedure: Procedure {
          get {
            return Procedure(snapshot: snapshot["procedure"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "procedure")
          }
        }

        public var isCertified: Bool? {
          get {
            return snapshot["isCertified"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isCertified")
          }
        }

        public var certificationMethod: CertificationMethod? {
          get {
            return snapshot["certificationMethod"] as? CertificationMethod
          }
          set {
            snapshot.updateValue(newValue, forKey: "certificationMethod")
          }
        }

        public var subjectId: GraphQLID {
          get {
            return snapshot["subjectId"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "subjectId")
          }
        }

        public var subject: Subject {
          get {
            return Subject(snapshot: snapshot["subject"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "subject")
          }
        }

        public var certificationLog: CertificationLog? {
          get {
            return (snapshot["certificationLog"] as? Snapshot).flatMap { CertificationLog(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "certificationLog")
          }
        }

        public var totalProcedureEvals: Int? {
          get {
            return snapshot["totalProcedureEvals"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "totalProcedureEvals")
          }
        }

        public struct Procedure: GraphQLSelectionSet {
          public static let possibleTypes = ["Procedure"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("description", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, description: String? = nil) {
            self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }
        }

        public struct Subject: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("orgID", type: .scalar(GraphQLID.self)),
            GraphQLField("userName", type: .scalar(String.self)),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
            GraphQLField("phone", type: .scalar(String.self)),
            GraphQLField("firstName", type: .scalar(String.self)),
            GraphQLField("lastName", type: .scalar(String.self)),
            GraphQLField("npi", type: .scalar(Int.self)),
            GraphQLField("isRater", type: .scalar(Bool.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
            self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var orgId: GraphQLID? {
            get {
              return snapshot["orgID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "orgID")
            }
          }

          public var userName: String? {
            get {
              return snapshot["userName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "userName")
            }
          }

          public var email: String {
            get {
              return snapshot["email"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var phone: String? {
            get {
              return snapshot["phone"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "phone")
            }
          }

          public var firstName: String? {
            get {
              return snapshot["firstName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "firstName")
            }
          }

          public var lastName: String? {
            get {
              return snapshot["lastName"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "lastName")
            }
          }

          public var npi: Int? {
            get {
              return snapshot["npi"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "npi")
            }
          }

          public var isRater: Bool? {
            get {
              return snapshot["isRater"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "isRater")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelMembershipConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Membership"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .nonNull(.scalar(Role.self))),
                GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, role: Role, userId: GraphQLID, programId: GraphQLID) {
                self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "programId": programId])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var role: Role {
                get {
                  return snapshot["role"]! as! Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userId")
                }
              }

              public var programId: GraphQLID {
                get {
                  return snapshot["programId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "programId")
                }
              }
            }
          }
        }

        public struct CertificationLog: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelEvaluationResponseConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelEvaluationResponseConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["EvaluationResponse"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
              GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("rater", type: .nonNull(.object(Rater.selections))),
              GraphQLField("raterId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("procedure", type: .object(Procedure.selections)),
              GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("evaluationDate", type: .nonNull(.scalar(String.self))),
              GraphQLField("ratingLevel", type: .scalar(Int.self)),
              GraphQLField("certificationRecordId", type: .scalar(GraphQLID.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, subject: Subject, subjectId: GraphQLID, rater: Rater, raterId: GraphQLID, procedure: Procedure? = nil, procedureId: GraphQLID, evaluationDate: String, ratingLevel: Int? = nil, certificationRecordId: GraphQLID? = nil) {
              self.init(snapshot: ["__typename": "EvaluationResponse", "id": id, "subject": subject.snapshot, "subjectId": subjectId, "rater": rater.snapshot, "raterId": raterId, "procedure": procedure.flatMap { $0.snapshot }, "procedureId": procedureId, "evaluationDate": evaluationDate, "ratingLevel": ratingLevel, "certificationRecordId": certificationRecordId])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var subject: Subject {
              get {
                return Subject(snapshot: snapshot["subject"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "subject")
              }
            }

            public var subjectId: GraphQLID {
              get {
                return snapshot["subjectId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "subjectId")
              }
            }

            public var rater: Rater {
              get {
                return Rater(snapshot: snapshot["rater"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "rater")
              }
            }

            public var raterId: GraphQLID {
              get {
                return snapshot["raterId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "raterId")
              }
            }

            public var procedure: Procedure? {
              get {
                return (snapshot["procedure"] as? Snapshot).flatMap { Procedure(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "procedure")
              }
            }

            public var procedureId: GraphQLID {
              get {
                return snapshot["procedureId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "procedureId")
              }
            }

            public var evaluationDate: String {
              get {
                return snapshot["evaluationDate"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "evaluationDate")
              }
            }

            public var ratingLevel: Int? {
              get {
                return snapshot["ratingLevel"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "ratingLevel")
              }
            }

            public var certificationRecordId: GraphQLID? {
              get {
                return snapshot["certificationRecordId"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "certificationRecordId")
              }
            }

            public struct Subject: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Rater: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Procedure: GraphQLSelectionSet {
              public static let possibleTypes = ["Procedure"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, description: String? = nil) {
                self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class UsersByEmailQuery: GraphQLQuery {
  public static let operationString =
    "query UsersByEmail($email: String, $sortDirection: ModelSortDirection, $filter: ModelUserFilterInput, $limit: Int, $nextToken: String) {\n  usersByEmail(email: $email, sortDirection: $sortDirection, filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    nextToken\n  }\n}"

  public var email: String?
  public var sortDirection: ModelSortDirection?
  public var filter: ModelUserFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(email: String? = nil, sortDirection: ModelSortDirection? = nil, filter: ModelUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.email = email
    self.sortDirection = sortDirection
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["email": email, "sortDirection": sortDirection, "filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("usersByEmail", arguments: ["email": GraphQLVariable("email"), "sortDirection": GraphQLVariable("sortDirection"), "filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(UsersByEmail.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(usersByEmail: UsersByEmail? = nil) {
      self.init(snapshot: ["__typename": "Query", "usersByEmail": usersByEmail.flatMap { $0.snapshot }])
    }

    public var usersByEmail: UsersByEmail? {
      get {
        return (snapshot["usersByEmail"] as? Snapshot).flatMap { UsersByEmail(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "usersByEmail")
      }
    }

    public struct UsersByEmail: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .list(.object(Item.selections))),
        GraphQLField("nextToken", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?]? = nil, nextToken: String? = nil) {
        self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?]? {
        get {
          return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
        }
        set {
          snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnCreateOrganizationSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateOrganization {\n  onCreateOrganization {\n    __typename\n    id\n    title\n    description\n    programs {\n      __typename\n      items {\n        __typename\n        id\n        name\n        orgID\n        description\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            role\n            userId\n            programId\n          }\n          nextToken\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateOrganization", type: .object(OnCreateOrganization.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateOrganization: OnCreateOrganization? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateOrganization": onCreateOrganization.flatMap { $0.snapshot }])
    }

    public var onCreateOrganization: OnCreateOrganization? {
      get {
        return (snapshot["onCreateOrganization"] as? Snapshot).flatMap { OnCreateOrganization(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateOrganization")
      }
    }

    public struct OnCreateOrganization: GraphQLSelectionSet {
      public static let possibleTypes = ["Organization"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("programs", type: .object(Program.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, title: String? = nil, description: String? = nil, programs: Program? = nil) {
        self.init(snapshot: ["__typename": "Organization", "id": id, "title": title, "description": description, "programs": programs.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var programs: Program? {
        get {
          return (snapshot["programs"] as? Snapshot).flatMap { Program(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "programs")
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelProgramConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelProgramConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Program"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
            self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var orgId: GraphQLID {
            get {
              return snapshot["orgID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "orgID")
            }
          }

          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelMembershipConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Membership"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .nonNull(.scalar(Role.self))),
                GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, role: Role, userId: GraphQLID, programId: GraphQLID) {
                self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "programId": programId])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var role: Role {
                get {
                  return snapshot["role"]! as! Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userId")
                }
              }

              public var programId: GraphQLID {
                get {
                  return snapshot["programId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "programId")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateOrganizationSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateOrganization {\n  onUpdateOrganization {\n    __typename\n    id\n    title\n    description\n    programs {\n      __typename\n      items {\n        __typename\n        id\n        name\n        orgID\n        description\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            role\n            userId\n            programId\n          }\n          nextToken\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateOrganization", type: .object(OnUpdateOrganization.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateOrganization: OnUpdateOrganization? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateOrganization": onUpdateOrganization.flatMap { $0.snapshot }])
    }

    public var onUpdateOrganization: OnUpdateOrganization? {
      get {
        return (snapshot["onUpdateOrganization"] as? Snapshot).flatMap { OnUpdateOrganization(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateOrganization")
      }
    }

    public struct OnUpdateOrganization: GraphQLSelectionSet {
      public static let possibleTypes = ["Organization"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("programs", type: .object(Program.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, title: String? = nil, description: String? = nil, programs: Program? = nil) {
        self.init(snapshot: ["__typename": "Organization", "id": id, "title": title, "description": description, "programs": programs.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var programs: Program? {
        get {
          return (snapshot["programs"] as? Snapshot).flatMap { Program(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "programs")
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelProgramConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelProgramConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Program"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
            self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var orgId: GraphQLID {
            get {
              return snapshot["orgID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "orgID")
            }
          }

          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelMembershipConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Membership"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .nonNull(.scalar(Role.self))),
                GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, role: Role, userId: GraphQLID, programId: GraphQLID) {
                self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "programId": programId])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var role: Role {
                get {
                  return snapshot["role"]! as! Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userId")
                }
              }

              public var programId: GraphQLID {
                get {
                  return snapshot["programId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "programId")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteOrganizationSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteOrganization {\n  onDeleteOrganization {\n    __typename\n    id\n    title\n    description\n    programs {\n      __typename\n      items {\n        __typename\n        id\n        name\n        orgID\n        description\n        memberships {\n          __typename\n          items {\n            __typename\n            id\n            role\n            userId\n            programId\n          }\n          nextToken\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteOrganization", type: .object(OnDeleteOrganization.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteOrganization: OnDeleteOrganization? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteOrganization": onDeleteOrganization.flatMap { $0.snapshot }])
    }

    public var onDeleteOrganization: OnDeleteOrganization? {
      get {
        return (snapshot["onDeleteOrganization"] as? Snapshot).flatMap { OnDeleteOrganization(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteOrganization")
      }
    }

    public struct OnDeleteOrganization: GraphQLSelectionSet {
      public static let possibleTypes = ["Organization"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("programs", type: .object(Program.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, title: String? = nil, description: String? = nil, programs: Program? = nil) {
        self.init(snapshot: ["__typename": "Organization", "id": id, "title": title, "description": description, "programs": programs.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var title: String? {
        get {
          return snapshot["title"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "title")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var programs: Program? {
        get {
          return (snapshot["programs"] as? Snapshot).flatMap { Program(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "programs")
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelProgramConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelProgramConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Program"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("memberships", type: .object(Membership.selections)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
            self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String {
            get {
              return snapshot["name"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var orgId: GraphQLID {
            get {
              return snapshot["orgID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "orgID")
            }
          }

          public var description: String? {
            get {
              return snapshot["description"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "description")
            }
          }

          public var memberships: Membership? {
            get {
              return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
            }
          }

          public struct Membership: GraphQLSelectionSet {
            public static let possibleTypes = ["ModelMembershipConnection"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("items", type: .list(.object(Item.selections))),
              GraphQLField("nextToken", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(items: [Item?]? = nil, nextToken: String? = nil) {
              self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var items: [Item?]? {
              get {
                return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
              }
              set {
                snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
              }
            }

            public var nextToken: String? {
              get {
                return snapshot["nextToken"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "nextToken")
              }
            }

            public struct Item: GraphQLSelectionSet {
              public static let possibleTypes = ["Membership"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("role", type: .nonNull(.scalar(Role.self))),
                GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, role: Role, userId: GraphQLID, programId: GraphQLID) {
                self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "programId": programId])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var role: Role {
                get {
                  return snapshot["role"]! as! Role
                }
                set {
                  snapshot.updateValue(newValue, forKey: "role")
                }
              }

              public var userId: GraphQLID {
                get {
                  return snapshot["userId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userId")
                }
              }

              public var programId: GraphQLID {
                get {
                  return snapshot["programId"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "programId")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnCreateProgramSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateProgram {\n  onCreateProgram {\n    __typename\n    id\n    name\n    orgID\n    description\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateProgram", type: .object(OnCreateProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateProgram: OnCreateProgram? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateProgram": onCreateProgram.flatMap { $0.snapshot }])
    }

    public var onCreateProgram: OnCreateProgram? {
      get {
        return (snapshot["onCreateProgram"] as? Snapshot).flatMap { OnCreateProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateProgram")
      }
    }

    public struct OnCreateProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["Program"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var orgId: GraphQLID {
        get {
          return snapshot["orgID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateProgramSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateProgram {\n  onUpdateProgram {\n    __typename\n    id\n    name\n    orgID\n    description\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateProgram", type: .object(OnUpdateProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateProgram: OnUpdateProgram? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateProgram": onUpdateProgram.flatMap { $0.snapshot }])
    }

    public var onUpdateProgram: OnUpdateProgram? {
      get {
        return (snapshot["onUpdateProgram"] as? Snapshot).flatMap { OnUpdateProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateProgram")
      }
    }

    public struct OnUpdateProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["Program"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var orgId: GraphQLID {
        get {
          return snapshot["orgID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteProgramSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteProgram {\n  onDeleteProgram {\n    __typename\n    id\n    name\n    orgID\n    description\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteProgram", type: .object(OnDeleteProgram.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteProgram: OnDeleteProgram? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteProgram": onDeleteProgram.flatMap { $0.snapshot }])
    }

    public var onDeleteProgram: OnDeleteProgram? {
      get {
        return (snapshot["onDeleteProgram"] as? Snapshot).flatMap { OnDeleteProgram(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteProgram")
      }
    }

    public struct OnDeleteProgram: GraphQLSelectionSet {
      public static let possibleTypes = ["Program"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var orgId: GraphQLID {
        get {
          return snapshot["orgID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnCreateMembershipSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateMembership {\n  onCreateMembership {\n    __typename\n    id\n    role\n    userId\n    user {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    programId\n    program {\n      __typename\n      id\n      name\n      orgID\n      description\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateMembership", type: .object(OnCreateMembership.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateMembership: OnCreateMembership? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateMembership": onCreateMembership.flatMap { $0.snapshot }])
    }

    public var onCreateMembership: OnCreateMembership? {
      get {
        return (snapshot["onCreateMembership"] as? Snapshot).flatMap { OnCreateMembership(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateMembership")
      }
    }

    public struct OnCreateMembership: GraphQLSelectionSet {
      public static let possibleTypes = ["Membership"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("role", type: .nonNull(.scalar(Role.self))),
        GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("program", type: .nonNull(.object(Program.selections))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
        self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var role: Role {
        get {
          return snapshot["role"]! as! Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userId")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var programId: GraphQLID {
        get {
          return snapshot["programId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "programId")
        }
      }

      public var program: Program {
        get {
          return Program(snapshot: snapshot["program"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "program")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["Program"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var orgId: GraphQLID {
          get {
            return snapshot["orgID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateMembershipSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateMembership {\n  onUpdateMembership {\n    __typename\n    id\n    role\n    userId\n    user {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    programId\n    program {\n      __typename\n      id\n      name\n      orgID\n      description\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateMembership", type: .object(OnUpdateMembership.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateMembership: OnUpdateMembership? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateMembership": onUpdateMembership.flatMap { $0.snapshot }])
    }

    public var onUpdateMembership: OnUpdateMembership? {
      get {
        return (snapshot["onUpdateMembership"] as? Snapshot).flatMap { OnUpdateMembership(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateMembership")
      }
    }

    public struct OnUpdateMembership: GraphQLSelectionSet {
      public static let possibleTypes = ["Membership"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("role", type: .nonNull(.scalar(Role.self))),
        GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("program", type: .nonNull(.object(Program.selections))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
        self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var role: Role {
        get {
          return snapshot["role"]! as! Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userId")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var programId: GraphQLID {
        get {
          return snapshot["programId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "programId")
        }
      }

      public var program: Program {
        get {
          return Program(snapshot: snapshot["program"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "program")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["Program"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var orgId: GraphQLID {
          get {
            return snapshot["orgID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteMembershipSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteMembership {\n  onDeleteMembership {\n    __typename\n    id\n    role\n    userId\n    user {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    programId\n    program {\n      __typename\n      id\n      name\n      orgID\n      description\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteMembership", type: .object(OnDeleteMembership.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteMembership: OnDeleteMembership? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteMembership": onDeleteMembership.flatMap { $0.snapshot }])
    }

    public var onDeleteMembership: OnDeleteMembership? {
      get {
        return (snapshot["onDeleteMembership"] as? Snapshot).flatMap { OnDeleteMembership(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteMembership")
      }
    }

    public struct OnDeleteMembership: GraphQLSelectionSet {
      public static let possibleTypes = ["Membership"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("role", type: .nonNull(.scalar(Role.self))),
        GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("program", type: .nonNull(.object(Program.selections))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
        self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var role: Role {
        get {
          return snapshot["role"]! as! Role
        }
        set {
          snapshot.updateValue(newValue, forKey: "role")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userId")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var programId: GraphQLID {
        get {
          return snapshot["programId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "programId")
        }
      }

      public var program: Program {
        get {
          return Program(snapshot: snapshot["program"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "program")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct Program: GraphQLSelectionSet {
        public static let possibleTypes = ["Program"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var orgId: GraphQLID {
          get {
            return snapshot["orgID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnCreateProcedureSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateProcedure {\n  onCreateProcedure {\n    __typename\n    id\n    name\n    description\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateProcedure", type: .object(OnCreateProcedure.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateProcedure: OnCreateProcedure? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateProcedure": onCreateProcedure.flatMap { $0.snapshot }])
    }

    public var onCreateProcedure: OnCreateProcedure? {
      get {
        return (snapshot["onCreateProcedure"] as? Snapshot).flatMap { OnCreateProcedure(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateProcedure")
      }
    }

    public struct OnCreateProcedure: GraphQLSelectionSet {
      public static let possibleTypes = ["Procedure"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("description", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, description: String? = nil) {
        self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }
    }
  }
}

public final class OnUpdateProcedureSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateProcedure {\n  onUpdateProcedure {\n    __typename\n    id\n    name\n    description\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateProcedure", type: .object(OnUpdateProcedure.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateProcedure: OnUpdateProcedure? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateProcedure": onUpdateProcedure.flatMap { $0.snapshot }])
    }

    public var onUpdateProcedure: OnUpdateProcedure? {
      get {
        return (snapshot["onUpdateProcedure"] as? Snapshot).flatMap { OnUpdateProcedure(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateProcedure")
      }
    }

    public struct OnUpdateProcedure: GraphQLSelectionSet {
      public static let possibleTypes = ["Procedure"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("description", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, description: String? = nil) {
        self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }
    }
  }
}

public final class OnDeleteProcedureSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteProcedure {\n  onDeleteProcedure {\n    __typename\n    id\n    name\n    description\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteProcedure", type: .object(OnDeleteProcedure.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteProcedure: OnDeleteProcedure? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteProcedure": onDeleteProcedure.flatMap { $0.snapshot }])
    }

    public var onDeleteProcedure: OnDeleteProcedure? {
      get {
        return (snapshot["onDeleteProcedure"] as? Snapshot).flatMap { OnDeleteProcedure(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteProcedure")
      }
    }

    public struct OnDeleteProcedure: GraphQLSelectionSet {
      public static let possibleTypes = ["Procedure"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("description", type: .scalar(String.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String, description: String? = nil) {
        self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return snapshot["name"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var description: String? {
        get {
          return snapshot["description"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "description")
        }
      }
    }
  }
}

public final class OnCreateUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateUser {\n  onCreateUser {\n    __typename\n    id\n    orgID\n    userName\n    email\n    phone\n    firstName\n    lastName\n    npi\n    isRater\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateUser", type: .object(OnCreateUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateUser: OnCreateUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateUser": onCreateUser.flatMap { $0.snapshot }])
    }

    public var onCreateUser: OnCreateUser? {
      get {
        return (snapshot["onCreateUser"] as? Snapshot).flatMap { OnCreateUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateUser")
      }
    }

    public struct OnCreateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("orgID", type: .scalar(GraphQLID.self)),
        GraphQLField("userName", type: .scalar(String.self)),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("firstName", type: .scalar(String.self)),
        GraphQLField("lastName", type: .scalar(String.self)),
        GraphQLField("npi", type: .scalar(Int.self)),
        GraphQLField("isRater", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var orgId: GraphQLID? {
        get {
          return snapshot["orgID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var userName: String? {
        get {
          return snapshot["userName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["firstName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["lastName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var npi: Int? {
        get {
          return snapshot["npi"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "npi")
        }
      }

      public var isRater: Bool? {
        get {
          return snapshot["isRater"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isRater")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateUser {\n  onUpdateUser {\n    __typename\n    id\n    orgID\n    userName\n    email\n    phone\n    firstName\n    lastName\n    npi\n    isRater\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateUser", type: .object(OnUpdateUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateUser: OnUpdateUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateUser": onUpdateUser.flatMap { $0.snapshot }])
    }

    public var onUpdateUser: OnUpdateUser? {
      get {
        return (snapshot["onUpdateUser"] as? Snapshot).flatMap { OnUpdateUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateUser")
      }
    }

    public struct OnUpdateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("orgID", type: .scalar(GraphQLID.self)),
        GraphQLField("userName", type: .scalar(String.self)),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("firstName", type: .scalar(String.self)),
        GraphQLField("lastName", type: .scalar(String.self)),
        GraphQLField("npi", type: .scalar(Int.self)),
        GraphQLField("isRater", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var orgId: GraphQLID? {
        get {
          return snapshot["orgID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var userName: String? {
        get {
          return snapshot["userName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["firstName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["lastName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var npi: Int? {
        get {
          return snapshot["npi"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "npi")
        }
      }

      public var isRater: Bool? {
        get {
          return snapshot["isRater"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isRater")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteUser {\n  onDeleteUser {\n    __typename\n    id\n    orgID\n    userName\n    email\n    phone\n    firstName\n    lastName\n    npi\n    isRater\n    memberships {\n      __typename\n      items {\n        __typename\n        id\n        role\n        userId\n        user {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        programId\n        program {\n          __typename\n          id\n          name\n          orgID\n          description\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n      }\n      nextToken\n    }\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteUser", type: .object(OnDeleteUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteUser: OnDeleteUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteUser": onDeleteUser.flatMap { $0.snapshot }])
    }

    public var onDeleteUser: OnDeleteUser? {
      get {
        return (snapshot["onDeleteUser"] as? Snapshot).flatMap { OnDeleteUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteUser")
      }
    }

    public struct OnDeleteUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("orgID", type: .scalar(GraphQLID.self)),
        GraphQLField("userName", type: .scalar(String.self)),
        GraphQLField("email", type: .nonNull(.scalar(String.self))),
        GraphQLField("phone", type: .scalar(String.self)),
        GraphQLField("firstName", type: .scalar(String.self)),
        GraphQLField("lastName", type: .scalar(String.self)),
        GraphQLField("npi", type: .scalar(Int.self)),
        GraphQLField("isRater", type: .scalar(Bool.self)),
        GraphQLField("memberships", type: .object(Membership.selections)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
        self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var orgId: GraphQLID? {
        get {
          return snapshot["orgID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "orgID")
        }
      }

      public var userName: String? {
        get {
          return snapshot["userName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userName")
        }
      }

      public var email: String {
        get {
          return snapshot["email"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var phone: String? {
        get {
          return snapshot["phone"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phone")
        }
      }

      public var firstName: String? {
        get {
          return snapshot["firstName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "firstName")
        }
      }

      public var lastName: String? {
        get {
          return snapshot["lastName"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastName")
        }
      }

      public var npi: Int? {
        get {
          return snapshot["npi"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "npi")
        }
      }

      public var isRater: Bool? {
        get {
          return snapshot["isRater"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isRater")
        }
      }

      public var memberships: Membership? {
        get {
          return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
        }
      }

      public struct Membership: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMembershipConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Membership"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("role", type: .nonNull(.scalar(Role.self))),
            GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("user", type: .nonNull(.object(User.selections))),
            GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("program", type: .nonNull(.object(Program.selections))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
            self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var role: Role {
            get {
              return snapshot["role"]! as! Role
            }
            set {
              snapshot.updateValue(newValue, forKey: "role")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userId")
            }
          }

          public var user: User {
            get {
              return User(snapshot: snapshot["user"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "user")
            }
          }

          public var programId: GraphQLID {
            get {
              return snapshot["programId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "programId")
            }
          }

          public var program: Program {
            get {
              return Program(snapshot: snapshot["program"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "program")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Program: GraphQLSelectionSet {
            public static let possibleTypes = ["Program"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var orgId: GraphQLID {
              get {
                return snapshot["orgID"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }
        }
      }
    }
  }
}

public final class OnCreateCertificationRecordSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateCertificationRecord {\n  onCreateCertificationRecord {\n    __typename\n    id\n    procedureId\n    procedure {\n      __typename\n      id\n      name\n      description\n    }\n    isCertified\n    certificationMethod\n    subjectId\n    subject {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    certificationLog {\n      __typename\n      items {\n        __typename\n        id\n        subject {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        subjectId\n        rater {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        raterId\n        procedure {\n          __typename\n          id\n          name\n          description\n        }\n        procedureId\n        evaluationDate\n        ratingLevel\n        certificationRecordId\n      }\n      nextToken\n    }\n    totalProcedureEvals\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateCertificationRecord", type: .object(OnCreateCertificationRecord.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateCertificationRecord: OnCreateCertificationRecord? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateCertificationRecord": onCreateCertificationRecord.flatMap { $0.snapshot }])
    }

    public var onCreateCertificationRecord: OnCreateCertificationRecord? {
      get {
        return (snapshot["onCreateCertificationRecord"] as? Snapshot).flatMap { OnCreateCertificationRecord(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateCertificationRecord")
      }
    }

    public struct OnCreateCertificationRecord: GraphQLSelectionSet {
      public static let possibleTypes = ["CertificationRecord"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedure", type: .nonNull(.object(Procedure.selections))),
        GraphQLField("isCertified", type: .scalar(Bool.self)),
        GraphQLField("certificationMethod", type: .scalar(CertificationMethod.self)),
        GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
        GraphQLField("certificationLog", type: .object(CertificationLog.selections)),
        GraphQLField("totalProcedureEvals", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, procedureId: GraphQLID, procedure: Procedure, isCertified: Bool? = nil, certificationMethod: CertificationMethod? = nil, subjectId: GraphQLID, subject: Subject, certificationLog: CertificationLog? = nil, totalProcedureEvals: Int? = nil) {
        self.init(snapshot: ["__typename": "CertificationRecord", "id": id, "procedureId": procedureId, "procedure": procedure.snapshot, "isCertified": isCertified, "certificationMethod": certificationMethod, "subjectId": subjectId, "subject": subject.snapshot, "certificationLog": certificationLog.flatMap { $0.snapshot }, "totalProcedureEvals": totalProcedureEvals])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var procedureId: GraphQLID {
        get {
          return snapshot["procedureId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "procedureId")
        }
      }

      public var procedure: Procedure {
        get {
          return Procedure(snapshot: snapshot["procedure"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "procedure")
        }
      }

      public var isCertified: Bool? {
        get {
          return snapshot["isCertified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCertified")
        }
      }

      public var certificationMethod: CertificationMethod? {
        get {
          return snapshot["certificationMethod"] as? CertificationMethod
        }
        set {
          snapshot.updateValue(newValue, forKey: "certificationMethod")
        }
      }

      public var subjectId: GraphQLID {
        get {
          return snapshot["subjectId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "subjectId")
        }
      }

      public var subject: Subject {
        get {
          return Subject(snapshot: snapshot["subject"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "subject")
        }
      }

      public var certificationLog: CertificationLog? {
        get {
          return (snapshot["certificationLog"] as? Snapshot).flatMap { CertificationLog(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "certificationLog")
        }
      }

      public var totalProcedureEvals: Int? {
        get {
          return snapshot["totalProcedureEvals"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalProcedureEvals")
        }
      }

      public struct Procedure: GraphQLSelectionSet {
        public static let possibleTypes = ["Procedure"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, description: String? = nil) {
          self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }
      }

      public struct Subject: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct CertificationLog: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelEvaluationResponseConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelEvaluationResponseConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["EvaluationResponse"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
            GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("rater", type: .nonNull(.object(Rater.selections))),
            GraphQLField("raterId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("procedure", type: .object(Procedure.selections)),
            GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("evaluationDate", type: .nonNull(.scalar(String.self))),
            GraphQLField("ratingLevel", type: .scalar(Int.self)),
            GraphQLField("certificationRecordId", type: .scalar(GraphQLID.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, subject: Subject, subjectId: GraphQLID, rater: Rater, raterId: GraphQLID, procedure: Procedure? = nil, procedureId: GraphQLID, evaluationDate: String, ratingLevel: Int? = nil, certificationRecordId: GraphQLID? = nil) {
            self.init(snapshot: ["__typename": "EvaluationResponse", "id": id, "subject": subject.snapshot, "subjectId": subjectId, "rater": rater.snapshot, "raterId": raterId, "procedure": procedure.flatMap { $0.snapshot }, "procedureId": procedureId, "evaluationDate": evaluationDate, "ratingLevel": ratingLevel, "certificationRecordId": certificationRecordId])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var subject: Subject {
            get {
              return Subject(snapshot: snapshot["subject"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "subject")
            }
          }

          public var subjectId: GraphQLID {
            get {
              return snapshot["subjectId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "subjectId")
            }
          }

          public var rater: Rater {
            get {
              return Rater(snapshot: snapshot["rater"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "rater")
            }
          }

          public var raterId: GraphQLID {
            get {
              return snapshot["raterId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "raterId")
            }
          }

          public var procedure: Procedure? {
            get {
              return (snapshot["procedure"] as? Snapshot).flatMap { Procedure(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "procedure")
            }
          }

          public var procedureId: GraphQLID {
            get {
              return snapshot["procedureId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "procedureId")
            }
          }

          public var evaluationDate: String {
            get {
              return snapshot["evaluationDate"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "evaluationDate")
            }
          }

          public var ratingLevel: Int? {
            get {
              return snapshot["ratingLevel"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "ratingLevel")
            }
          }

          public var certificationRecordId: GraphQLID? {
            get {
              return snapshot["certificationRecordId"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "certificationRecordId")
            }
          }

          public struct Subject: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Rater: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Procedure: GraphQLSelectionSet {
            public static let possibleTypes = ["Procedure"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("description", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, description: String? = nil) {
              self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateCertificationRecordSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateCertificationRecord {\n  onUpdateCertificationRecord {\n    __typename\n    id\n    procedureId\n    procedure {\n      __typename\n      id\n      name\n      description\n    }\n    isCertified\n    certificationMethod\n    subjectId\n    subject {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    certificationLog {\n      __typename\n      items {\n        __typename\n        id\n        subject {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        subjectId\n        rater {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        raterId\n        procedure {\n          __typename\n          id\n          name\n          description\n        }\n        procedureId\n        evaluationDate\n        ratingLevel\n        certificationRecordId\n      }\n      nextToken\n    }\n    totalProcedureEvals\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateCertificationRecord", type: .object(OnUpdateCertificationRecord.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateCertificationRecord: OnUpdateCertificationRecord? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateCertificationRecord": onUpdateCertificationRecord.flatMap { $0.snapshot }])
    }

    public var onUpdateCertificationRecord: OnUpdateCertificationRecord? {
      get {
        return (snapshot["onUpdateCertificationRecord"] as? Snapshot).flatMap { OnUpdateCertificationRecord(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateCertificationRecord")
      }
    }

    public struct OnUpdateCertificationRecord: GraphQLSelectionSet {
      public static let possibleTypes = ["CertificationRecord"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedure", type: .nonNull(.object(Procedure.selections))),
        GraphQLField("isCertified", type: .scalar(Bool.self)),
        GraphQLField("certificationMethod", type: .scalar(CertificationMethod.self)),
        GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
        GraphQLField("certificationLog", type: .object(CertificationLog.selections)),
        GraphQLField("totalProcedureEvals", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, procedureId: GraphQLID, procedure: Procedure, isCertified: Bool? = nil, certificationMethod: CertificationMethod? = nil, subjectId: GraphQLID, subject: Subject, certificationLog: CertificationLog? = nil, totalProcedureEvals: Int? = nil) {
        self.init(snapshot: ["__typename": "CertificationRecord", "id": id, "procedureId": procedureId, "procedure": procedure.snapshot, "isCertified": isCertified, "certificationMethod": certificationMethod, "subjectId": subjectId, "subject": subject.snapshot, "certificationLog": certificationLog.flatMap { $0.snapshot }, "totalProcedureEvals": totalProcedureEvals])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var procedureId: GraphQLID {
        get {
          return snapshot["procedureId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "procedureId")
        }
      }

      public var procedure: Procedure {
        get {
          return Procedure(snapshot: snapshot["procedure"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "procedure")
        }
      }

      public var isCertified: Bool? {
        get {
          return snapshot["isCertified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCertified")
        }
      }

      public var certificationMethod: CertificationMethod? {
        get {
          return snapshot["certificationMethod"] as? CertificationMethod
        }
        set {
          snapshot.updateValue(newValue, forKey: "certificationMethod")
        }
      }

      public var subjectId: GraphQLID {
        get {
          return snapshot["subjectId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "subjectId")
        }
      }

      public var subject: Subject {
        get {
          return Subject(snapshot: snapshot["subject"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "subject")
        }
      }

      public var certificationLog: CertificationLog? {
        get {
          return (snapshot["certificationLog"] as? Snapshot).flatMap { CertificationLog(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "certificationLog")
        }
      }

      public var totalProcedureEvals: Int? {
        get {
          return snapshot["totalProcedureEvals"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalProcedureEvals")
        }
      }

      public struct Procedure: GraphQLSelectionSet {
        public static let possibleTypes = ["Procedure"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, description: String? = nil) {
          self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }
      }

      public struct Subject: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct CertificationLog: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelEvaluationResponseConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelEvaluationResponseConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["EvaluationResponse"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
            GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("rater", type: .nonNull(.object(Rater.selections))),
            GraphQLField("raterId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("procedure", type: .object(Procedure.selections)),
            GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("evaluationDate", type: .nonNull(.scalar(String.self))),
            GraphQLField("ratingLevel", type: .scalar(Int.self)),
            GraphQLField("certificationRecordId", type: .scalar(GraphQLID.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, subject: Subject, subjectId: GraphQLID, rater: Rater, raterId: GraphQLID, procedure: Procedure? = nil, procedureId: GraphQLID, evaluationDate: String, ratingLevel: Int? = nil, certificationRecordId: GraphQLID? = nil) {
            self.init(snapshot: ["__typename": "EvaluationResponse", "id": id, "subject": subject.snapshot, "subjectId": subjectId, "rater": rater.snapshot, "raterId": raterId, "procedure": procedure.flatMap { $0.snapshot }, "procedureId": procedureId, "evaluationDate": evaluationDate, "ratingLevel": ratingLevel, "certificationRecordId": certificationRecordId])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var subject: Subject {
            get {
              return Subject(snapshot: snapshot["subject"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "subject")
            }
          }

          public var subjectId: GraphQLID {
            get {
              return snapshot["subjectId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "subjectId")
            }
          }

          public var rater: Rater {
            get {
              return Rater(snapshot: snapshot["rater"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "rater")
            }
          }

          public var raterId: GraphQLID {
            get {
              return snapshot["raterId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "raterId")
            }
          }

          public var procedure: Procedure? {
            get {
              return (snapshot["procedure"] as? Snapshot).flatMap { Procedure(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "procedure")
            }
          }

          public var procedureId: GraphQLID {
            get {
              return snapshot["procedureId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "procedureId")
            }
          }

          public var evaluationDate: String {
            get {
              return snapshot["evaluationDate"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "evaluationDate")
            }
          }

          public var ratingLevel: Int? {
            get {
              return snapshot["ratingLevel"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "ratingLevel")
            }
          }

          public var certificationRecordId: GraphQLID? {
            get {
              return snapshot["certificationRecordId"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "certificationRecordId")
            }
          }

          public struct Subject: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Rater: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Procedure: GraphQLSelectionSet {
            public static let possibleTypes = ["Procedure"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("description", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, description: String? = nil) {
              self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteCertificationRecordSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteCertificationRecord {\n  onDeleteCertificationRecord {\n    __typename\n    id\n    procedureId\n    procedure {\n      __typename\n      id\n      name\n      description\n    }\n    isCertified\n    certificationMethod\n    subjectId\n    subject {\n      __typename\n      id\n      orgID\n      userName\n      email\n      phone\n      firstName\n      lastName\n      npi\n      isRater\n      memberships {\n        __typename\n        items {\n          __typename\n          id\n          role\n          userId\n          user {\n            __typename\n            id\n            orgID\n            userName\n            email\n            phone\n            firstName\n            lastName\n            npi\n            isRater\n          }\n          programId\n          program {\n            __typename\n            id\n            name\n            orgID\n            description\n          }\n        }\n        nextToken\n      }\n    }\n    certificationLog {\n      __typename\n      items {\n        __typename\n        id\n        subject {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        subjectId\n        rater {\n          __typename\n          id\n          orgID\n          userName\n          email\n          phone\n          firstName\n          lastName\n          npi\n          isRater\n          memberships {\n            __typename\n            nextToken\n          }\n        }\n        raterId\n        procedure {\n          __typename\n          id\n          name\n          description\n        }\n        procedureId\n        evaluationDate\n        ratingLevel\n        certificationRecordId\n      }\n      nextToken\n    }\n    totalProcedureEvals\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteCertificationRecord", type: .object(OnDeleteCertificationRecord.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteCertificationRecord: OnDeleteCertificationRecord? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteCertificationRecord": onDeleteCertificationRecord.flatMap { $0.snapshot }])
    }

    public var onDeleteCertificationRecord: OnDeleteCertificationRecord? {
      get {
        return (snapshot["onDeleteCertificationRecord"] as? Snapshot).flatMap { OnDeleteCertificationRecord(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteCertificationRecord")
      }
    }

    public struct OnDeleteCertificationRecord: GraphQLSelectionSet {
      public static let possibleTypes = ["CertificationRecord"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("procedure", type: .nonNull(.object(Procedure.selections))),
        GraphQLField("isCertified", type: .scalar(Bool.self)),
        GraphQLField("certificationMethod", type: .scalar(CertificationMethod.self)),
        GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
        GraphQLField("certificationLog", type: .object(CertificationLog.selections)),
        GraphQLField("totalProcedureEvals", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, procedureId: GraphQLID, procedure: Procedure, isCertified: Bool? = nil, certificationMethod: CertificationMethod? = nil, subjectId: GraphQLID, subject: Subject, certificationLog: CertificationLog? = nil, totalProcedureEvals: Int? = nil) {
        self.init(snapshot: ["__typename": "CertificationRecord", "id": id, "procedureId": procedureId, "procedure": procedure.snapshot, "isCertified": isCertified, "certificationMethod": certificationMethod, "subjectId": subjectId, "subject": subject.snapshot, "certificationLog": certificationLog.flatMap { $0.snapshot }, "totalProcedureEvals": totalProcedureEvals])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var procedureId: GraphQLID {
        get {
          return snapshot["procedureId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "procedureId")
        }
      }

      public var procedure: Procedure {
        get {
          return Procedure(snapshot: snapshot["procedure"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "procedure")
        }
      }

      public var isCertified: Bool? {
        get {
          return snapshot["isCertified"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "isCertified")
        }
      }

      public var certificationMethod: CertificationMethod? {
        get {
          return snapshot["certificationMethod"] as? CertificationMethod
        }
        set {
          snapshot.updateValue(newValue, forKey: "certificationMethod")
        }
      }

      public var subjectId: GraphQLID {
        get {
          return snapshot["subjectId"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "subjectId")
        }
      }

      public var subject: Subject {
        get {
          return Subject(snapshot: snapshot["subject"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "subject")
        }
      }

      public var certificationLog: CertificationLog? {
        get {
          return (snapshot["certificationLog"] as? Snapshot).flatMap { CertificationLog(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "certificationLog")
        }
      }

      public var totalProcedureEvals: Int? {
        get {
          return snapshot["totalProcedureEvals"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "totalProcedureEvals")
        }
      }

      public struct Procedure: GraphQLSelectionSet {
        public static let possibleTypes = ["Procedure"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String, description: String? = nil) {
          self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return snapshot["name"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return snapshot["description"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "description")
          }
        }
      }

      public struct Subject: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("orgID", type: .scalar(GraphQLID.self)),
          GraphQLField("userName", type: .scalar(String.self)),
          GraphQLField("email", type: .nonNull(.scalar(String.self))),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("npi", type: .scalar(Int.self)),
          GraphQLField("isRater", type: .scalar(Bool.self)),
          GraphQLField("memberships", type: .object(Membership.selections)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
          self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var orgId: GraphQLID? {
          get {
            return snapshot["orgID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "orgID")
          }
        }

        public var userName: String? {
          get {
            return snapshot["userName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userName")
          }
        }

        public var email: String {
          get {
            return snapshot["email"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var phone: String? {
          get {
            return snapshot["phone"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phone")
          }
        }

        public var firstName: String? {
          get {
            return snapshot["firstName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "firstName")
          }
        }

        public var lastName: String? {
          get {
            return snapshot["lastName"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastName")
          }
        }

        public var npi: Int? {
          get {
            return snapshot["npi"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "npi")
          }
        }

        public var isRater: Bool? {
          get {
            return snapshot["isRater"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "isRater")
          }
        }

        public var memberships: Membership? {
          get {
            return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
          }
        }

        public struct Membership: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMembershipConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("items", type: .list(.object(Item.selections))),
            GraphQLField("nextToken", type: .scalar(String.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(items: [Item?]? = nil, nextToken: String? = nil) {
            self.init(snapshot: ["__typename": "ModelMembershipConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var items: [Item?]? {
            get {
              return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
            }
            set {
              snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public struct Item: GraphQLSelectionSet {
            public static let possibleTypes = ["Membership"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("role", type: .nonNull(.scalar(Role.self))),
              GraphQLField("userId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("user", type: .nonNull(.object(User.selections))),
              GraphQLField("programId", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("program", type: .nonNull(.object(Program.selections))),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, role: Role, userId: GraphQLID, user: User, programId: GraphQLID, program: Program) {
              self.init(snapshot: ["__typename": "Membership", "id": id, "role": role, "userId": userId, "user": user.snapshot, "programId": programId, "program": program.snapshot])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var role: Role {
              get {
                return snapshot["role"]! as! Role
              }
              set {
                snapshot.updateValue(newValue, forKey: "role")
              }
            }

            public var userId: GraphQLID {
              get {
                return snapshot["userId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "userId")
              }
            }

            public var user: User {
              get {
                return User(snapshot: snapshot["user"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "user")
              }
            }

            public var programId: GraphQLID {
              get {
                return snapshot["programId"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "programId")
              }
            }

            public var program: Program {
              get {
                return Program(snapshot: snapshot["program"]! as! Snapshot)
              }
              set {
                snapshot.updateValue(newValue.snapshot, forKey: "program")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["User"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("orgID", type: .scalar(GraphQLID.self)),
                GraphQLField("userName", type: .scalar(String.self)),
                GraphQLField("email", type: .nonNull(.scalar(String.self))),
                GraphQLField("phone", type: .scalar(String.self)),
                GraphQLField("firstName", type: .scalar(String.self)),
                GraphQLField("lastName", type: .scalar(String.self)),
                GraphQLField("npi", type: .scalar(Int.self)),
                GraphQLField("isRater", type: .scalar(Bool.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil) {
                self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var orgId: GraphQLID? {
                get {
                  return snapshot["orgID"] as? GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var userName: String? {
                get {
                  return snapshot["userName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "userName")
                }
              }

              public var email: String {
                get {
                  return snapshot["email"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "email")
                }
              }

              public var phone: String? {
                get {
                  return snapshot["phone"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "phone")
                }
              }

              public var firstName: String? {
                get {
                  return snapshot["firstName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "firstName")
                }
              }

              public var lastName: String? {
                get {
                  return snapshot["lastName"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "lastName")
                }
              }

              public var npi: Int? {
                get {
                  return snapshot["npi"] as? Int
                }
                set {
                  snapshot.updateValue(newValue, forKey: "npi")
                }
              }

              public var isRater: Bool? {
                get {
                  return snapshot["isRater"] as? Bool
                }
                set {
                  snapshot.updateValue(newValue, forKey: "isRater")
                }
              }
            }

            public struct Program: GraphQLSelectionSet {
              public static let possibleTypes = ["Program"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgID", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("description", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(id: GraphQLID, name: String, orgId: GraphQLID, description: String? = nil) {
                self.init(snapshot: ["__typename": "Program", "id": id, "name": name, "orgID": orgId, "description": description])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var id: GraphQLID {
                get {
                  return snapshot["id"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "id")
                }
              }

              public var name: String {
                get {
                  return snapshot["name"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "name")
                }
              }

              public var orgId: GraphQLID {
                get {
                  return snapshot["orgID"]! as! GraphQLID
                }
                set {
                  snapshot.updateValue(newValue, forKey: "orgID")
                }
              }

              public var description: String? {
                get {
                  return snapshot["description"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "description")
                }
              }
            }
          }
        }
      }

      public struct CertificationLog: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelEvaluationResponseConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .list(.object(Item.selections))),
          GraphQLField("nextToken", type: .scalar(String.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?]? = nil, nextToken: String? = nil) {
          self.init(snapshot: ["__typename": "ModelEvaluationResponseConnection", "items": items.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, "nextToken": nextToken])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?]? {
          get {
            return (snapshot["items"] as? [Snapshot?]).flatMap { $0.map { $0.flatMap { Item(snapshot: $0) } } }
          }
          set {
            snapshot.updateValue(newValue.flatMap { $0.map { $0.flatMap { $0.snapshot } } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["EvaluationResponse"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("subject", type: .nonNull(.object(Subject.selections))),
            GraphQLField("subjectId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("rater", type: .nonNull(.object(Rater.selections))),
            GraphQLField("raterId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("procedure", type: .object(Procedure.selections)),
            GraphQLField("procedureId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("evaluationDate", type: .nonNull(.scalar(String.self))),
            GraphQLField("ratingLevel", type: .scalar(Int.self)),
            GraphQLField("certificationRecordId", type: .scalar(GraphQLID.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, subject: Subject, subjectId: GraphQLID, rater: Rater, raterId: GraphQLID, procedure: Procedure? = nil, procedureId: GraphQLID, evaluationDate: String, ratingLevel: Int? = nil, certificationRecordId: GraphQLID? = nil) {
            self.init(snapshot: ["__typename": "EvaluationResponse", "id": id, "subject": subject.snapshot, "subjectId": subjectId, "rater": rater.snapshot, "raterId": raterId, "procedure": procedure.flatMap { $0.snapshot }, "procedureId": procedureId, "evaluationDate": evaluationDate, "ratingLevel": ratingLevel, "certificationRecordId": certificationRecordId])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var subject: Subject {
            get {
              return Subject(snapshot: snapshot["subject"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "subject")
            }
          }

          public var subjectId: GraphQLID {
            get {
              return snapshot["subjectId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "subjectId")
            }
          }

          public var rater: Rater {
            get {
              return Rater(snapshot: snapshot["rater"]! as! Snapshot)
            }
            set {
              snapshot.updateValue(newValue.snapshot, forKey: "rater")
            }
          }

          public var raterId: GraphQLID {
            get {
              return snapshot["raterId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "raterId")
            }
          }

          public var procedure: Procedure? {
            get {
              return (snapshot["procedure"] as? Snapshot).flatMap { Procedure(snapshot: $0) }
            }
            set {
              snapshot.updateValue(newValue?.snapshot, forKey: "procedure")
            }
          }

          public var procedureId: GraphQLID {
            get {
              return snapshot["procedureId"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "procedureId")
            }
          }

          public var evaluationDate: String {
            get {
              return snapshot["evaluationDate"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "evaluationDate")
            }
          }

          public var ratingLevel: Int? {
            get {
              return snapshot["ratingLevel"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "ratingLevel")
            }
          }

          public var certificationRecordId: GraphQLID? {
            get {
              return snapshot["certificationRecordId"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "certificationRecordId")
            }
          }

          public struct Subject: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Rater: GraphQLSelectionSet {
            public static let possibleTypes = ["User"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("orgID", type: .scalar(GraphQLID.self)),
              GraphQLField("userName", type: .scalar(String.self)),
              GraphQLField("email", type: .nonNull(.scalar(String.self))),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("npi", type: .scalar(Int.self)),
              GraphQLField("isRater", type: .scalar(Bool.self)),
              GraphQLField("memberships", type: .object(Membership.selections)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, orgId: GraphQLID? = nil, userName: String? = nil, email: String, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, npi: Int? = nil, isRater: Bool? = nil, memberships: Membership? = nil) {
              self.init(snapshot: ["__typename": "User", "id": id, "orgID": orgId, "userName": userName, "email": email, "phone": phone, "firstName": firstName, "lastName": lastName, "npi": npi, "isRater": isRater, "memberships": memberships.flatMap { $0.snapshot }])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var orgId: GraphQLID? {
              get {
                return snapshot["orgID"] as? GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "orgID")
              }
            }

            public var userName: String? {
              get {
                return snapshot["userName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "userName")
              }
            }

            public var email: String {
              get {
                return snapshot["email"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "email")
              }
            }

            public var phone: String? {
              get {
                return snapshot["phone"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "phone")
              }
            }

            public var firstName: String? {
              get {
                return snapshot["firstName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "firstName")
              }
            }

            public var lastName: String? {
              get {
                return snapshot["lastName"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "lastName")
              }
            }

            public var npi: Int? {
              get {
                return snapshot["npi"] as? Int
              }
              set {
                snapshot.updateValue(newValue, forKey: "npi")
              }
            }

            public var isRater: Bool? {
              get {
                return snapshot["isRater"] as? Bool
              }
              set {
                snapshot.updateValue(newValue, forKey: "isRater")
              }
            }

            public var memberships: Membership? {
              get {
                return (snapshot["memberships"] as? Snapshot).flatMap { Membership(snapshot: $0) }
              }
              set {
                snapshot.updateValue(newValue?.snapshot, forKey: "memberships")
              }
            }

            public struct Membership: GraphQLSelectionSet {
              public static let possibleTypes = ["ModelMembershipConnection"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("nextToken", type: .scalar(String.self)),
              ]

              public var snapshot: Snapshot

              public init(snapshot: Snapshot) {
                self.snapshot = snapshot
              }

              public init(nextToken: String? = nil) {
                self.init(snapshot: ["__typename": "ModelMembershipConnection", "nextToken": nextToken])
              }

              public var __typename: String {
                get {
                  return snapshot["__typename"]! as! String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "__typename")
                }
              }

              public var nextToken: String? {
                get {
                  return snapshot["nextToken"] as? String
                }
                set {
                  snapshot.updateValue(newValue, forKey: "nextToken")
                }
              }
            }
          }

          public struct Procedure: GraphQLSelectionSet {
            public static let possibleTypes = ["Procedure"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("description", type: .scalar(String.self)),
            ]

            public var snapshot: Snapshot

            public init(snapshot: Snapshot) {
              self.snapshot = snapshot
            }

            public init(id: GraphQLID, name: String, description: String? = nil) {
              self.init(snapshot: ["__typename": "Procedure", "id": id, "name": name, "description": description])
            }

            public var __typename: String {
              get {
                return snapshot["__typename"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: GraphQLID {
              get {
                return snapshot["id"]! as! GraphQLID
              }
              set {
                snapshot.updateValue(newValue, forKey: "id")
              }
            }

            public var name: String {
              get {
                return snapshot["name"]! as! String
              }
              set {
                snapshot.updateValue(newValue, forKey: "name")
              }
            }

            public var description: String? {
              get {
                return snapshot["description"] as? String
              }
              set {
                snapshot.updateValue(newValue, forKey: "description")
              }
            }
          }
        }
      }
    }
  }
}